{
    "docs": [
        {
            "location": "/", 
            "text": "jsreports documentation\n\n\nFor Developers\n\n\nGetting Started\n\n\nDeveloper Guide\n\n\nIntegration: Jasper Reports\n\n\nIntegration: Sencha ExtJS\n\n\nExamples\n\n\nAPI Reference\n\n\nReport Builder API\n\n\nJSON Report Format\n\n\nChange Log\n\n\nGenerating PDF reports on the server using Node.js and jsreports\n\n\nFor Report Designers\n\n\nReport Designer Guide\n\n\nBuilt-in Functions", 
            "title": "Home"
        }, 
        {
            "location": "/#jsreports-documentation", 
            "text": "", 
            "title": "jsreports documentation"
        }, 
        {
            "location": "/#for-developers", 
            "text": "", 
            "title": "For Developers"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#developer-guide", 
            "text": "", 
            "title": "Developer Guide"
        }, 
        {
            "location": "/#integration-jasper-reports", 
            "text": "", 
            "title": "Integration: Jasper Reports"
        }, 
        {
            "location": "/#integration-sencha-extjs", 
            "text": "", 
            "title": "Integration: Sencha ExtJS"
        }, 
        {
            "location": "/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/#api-reference", 
            "text": "", 
            "title": "API Reference"
        }, 
        {
            "location": "/#report-builder-api", 
            "text": "", 
            "title": "Report Builder API"
        }, 
        {
            "location": "/#json-report-format", 
            "text": "", 
            "title": "JSON Report Format"
        }, 
        {
            "location": "/#change-log", 
            "text": "", 
            "title": "Change Log"
        }, 
        {
            "location": "/#generating-pdf-reports-on-the-server-using-nodejs-and-jsreports", 
            "text": "", 
            "title": "Generating PDF reports on the server using Node.js and jsreports"
        }, 
        {
            "location": "/#for-report-designers", 
            "text": "", 
            "title": "For Report Designers"
        }, 
        {
            "location": "/#report-designer-guide", 
            "text": "", 
            "title": "Report Designer Guide"
        }, 
        {
            "location": "/#built-in-functions", 
            "text": "", 
            "title": "Built-in Functions"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started\n\n\nRequirements\n\n\njsreports uses standard web technologies (HTML, JavaScript, and CSS)\nand does not require any browser plug-ins to run.  Excel and PDF files\nare generated entirely in JavaScript, on the client.  No server\ncomponent is required - you only need to include the jsreports\nJavaScript library in your web page.\n\n\nBrowser compatibility\n\n\njsreports supports all modern web browsers, including IE 10+.\n\n\nInstallation\n\n\nExtract the jsreports distribution into a folder within your web application.  \n\n\nInclude the jsreports module:\n\n\nES6:\n\nimport jsreports from './lib/jsreports-all.min';\n\n\nES5:\n\nvar jsreports = require('./lib/jsreports-all.min');\n\n\nScript tag (the old-fashioned way):\n\nscript src=\"jsreports-all.min.js\" type=\"text/javascript\"\n\n\nYour first report\n\n\nFirst, define a data source.  Data sources for jsreports are JSON or CSV data.  You can\npoint to a data source on a server by its URL, or you can provide actual data as a literal JavaScript array.  See \n\nWorking with Data\n for more details and examples.\n\n\nTo get started with a simple data source, copy and paste the following code.  This will be a simple data source with just three rows of data.\n\n\nvar orderData = [{\n    \"userId\": \"1X39AN4Z92Y\",\n    \"userName\": \"John Smith\",\n    \"accountType\": \"INDIVIDUAL\",\n    \"orderTotal\": 19.95,\n    \"orderDate\": \"2016-02-24\"\n},{\n    \"userId\": \"1AC43L30HR8\",\n    \"userName\": \"Alison Jones\",\n    \"accountType\": \"BUSINESS\",\n    \"orderTotal\": 180.50,\n    \"orderDate\": \"2016-02-25\"\n},{\n    \"userId\": \"1CM499NA94R\",\n    \"userName\": \"Becky Sanderson\",\n    \"accountType\": \"BUSINESS\",\n    \"orderTotal\": 85.00,\n    \"orderDate\": \"2016-02-27\"\n}];\n\n// A schema is used to assist the report designer and report engine to know\n// about the data types used in the data source.\nvar orderSchema = {\n    fields: [{\n        name: \"userId\",\n        type: \"text\"\n    },{\n        name: \"userName\",\n        type: \"text\"\n    },{\n        name: \"accountType\",\n        type: \"text\"\n    },{\n        name: \"orderTotal\",\n        type: \"number\"\n    },{\n        name: \"orderDate\",\n        type: \"date\"\n    }]\n};\n\nvar dataSource = {\n    id: \"orders\",   // Internal reference ID\n    name: \"Orders\",  // Data source name shown to report designer\n    data: orderData,\n    schema: orderSchema\n};\n\n\n\n\nNow, we'll define a very simple report that uses this data.  You can use the report\ncomponent to create reports, but here we'll use the \n\nreport builder API\n \nto assemble a report definition in code.\n\n\n// Create a report definition\nvar report = jsreports.createReport()\n    .data('orders') // The report will look for a data source with ID \"orders\"\n    .groupBy('accountType', 'accountType', 'desc')\n        .header(0.35)\n            .text('[accountType] Accounts:')\n        .footer(0.5)\n            .text('Total: [SUM(orderTotal)]', 2, 0, 2, 0.25, {\n                pattern: '$#,##0.00',\n                align: 'right',\n                bold: true\n            })\n    .detail()\n        .text('[userName]')\n        .text('[orderDate]', 1.75, 0, 1, 0.25, {\n            pattern: 'M/D/YY'\n        })\n        .text('[orderTotal]', 3, 0, 1, 0.25, {\n            pattern: '$#,##0.00',\n            align: 'right'\n        })\n    .done();\n\n// Render the report\njsreports.render({\n    report_def: report,\n    target: $('body').css('min-height', '500px'),\n    datasets: [ dataSource ]\n});\n\n\n\n\nWhen you run this code, you should get a result like the following:\n\n\n\n\nNext, check out the \nexamples\n to see how to implement other types of reports.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#requirements", 
            "text": "jsreports uses standard web technologies (HTML, JavaScript, and CSS)\nand does not require any browser plug-ins to run.  Excel and PDF files\nare generated entirely in JavaScript, on the client.  No server\ncomponent is required - you only need to include the jsreports\nJavaScript library in your web page.", 
            "title": "Requirements"
        }, 
        {
            "location": "/getting-started/#browser-compatibility", 
            "text": "jsreports supports all modern web browsers, including IE 10+.", 
            "title": "Browser compatibility"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "Extract the jsreports distribution into a folder within your web application.    Include the jsreports module:  ES6: import jsreports from './lib/jsreports-all.min';  ES5: var jsreports = require('./lib/jsreports-all.min');  Script tag (the old-fashioned way): script src=\"jsreports-all.min.js\" type=\"text/javascript\"", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#your-first-report", 
            "text": "First, define a data source.  Data sources for jsreports are JSON or CSV data.  You can\npoint to a data source on a server by its URL, or you can provide actual data as a literal JavaScript array.  See  Working with Data  for more details and examples.  To get started with a simple data source, copy and paste the following code.  This will be a simple data source with just three rows of data.  var orderData = [{\n    \"userId\": \"1X39AN4Z92Y\",\n    \"userName\": \"John Smith\",\n    \"accountType\": \"INDIVIDUAL\",\n    \"orderTotal\": 19.95,\n    \"orderDate\": \"2016-02-24\"\n},{\n    \"userId\": \"1AC43L30HR8\",\n    \"userName\": \"Alison Jones\",\n    \"accountType\": \"BUSINESS\",\n    \"orderTotal\": 180.50,\n    \"orderDate\": \"2016-02-25\"\n},{\n    \"userId\": \"1CM499NA94R\",\n    \"userName\": \"Becky Sanderson\",\n    \"accountType\": \"BUSINESS\",\n    \"orderTotal\": 85.00,\n    \"orderDate\": \"2016-02-27\"\n}];\n\n// A schema is used to assist the report designer and report engine to know\n// about the data types used in the data source.\nvar orderSchema = {\n    fields: [{\n        name: \"userId\",\n        type: \"text\"\n    },{\n        name: \"userName\",\n        type: \"text\"\n    },{\n        name: \"accountType\",\n        type: \"text\"\n    },{\n        name: \"orderTotal\",\n        type: \"number\"\n    },{\n        name: \"orderDate\",\n        type: \"date\"\n    }]\n};\n\nvar dataSource = {\n    id: \"orders\",   // Internal reference ID\n    name: \"Orders\",  // Data source name shown to report designer\n    data: orderData,\n    schema: orderSchema\n};  Now, we'll define a very simple report that uses this data.  You can use the report\ncomponent to create reports, but here we'll use the  report builder API  \nto assemble a report definition in code.  // Create a report definition\nvar report = jsreports.createReport()\n    .data('orders') // The report will look for a data source with ID \"orders\"\n    .groupBy('accountType', 'accountType', 'desc')\n        .header(0.35)\n            .text('[accountType] Accounts:')\n        .footer(0.5)\n            .text('Total: [SUM(orderTotal)]', 2, 0, 2, 0.25, {\n                pattern: '$#,##0.00',\n                align: 'right',\n                bold: true\n            })\n    .detail()\n        .text('[userName]')\n        .text('[orderDate]', 1.75, 0, 1, 0.25, {\n            pattern: 'M/D/YY'\n        })\n        .text('[orderTotal]', 3, 0, 1, 0.25, {\n            pattern: '$#,##0.00',\n            align: 'right'\n        })\n    .done();\n\n// Render the report\njsreports.render({\n    report_def: report,\n    target: $('body').css('min-height', '500px'),\n    datasets: [ dataSource ]\n});  When you run this code, you should get a result like the following:   Next, check out the  examples  to see how to implement other types of reports.", 
            "title": "Your first report"
        }, 
        {
            "location": "/dev/", 
            "text": "Ditto \nDeveloper Guide\n\n\nDitto is a JavaScript library that provides on-screen and print report generation for web applications.\n\n\n\n\nWorks with any web framework and back-end\n\n\nIncludes a visual report designer component to modify and create custom reports\n\n\nGenerates HTML, PDF, and Excel files right in the browser \n\n\n\n\nSee the \nchangelog\n for latest changes.\n\n\nSee \nGetting Started\n for requirements and installation.\n\n\n Working with data\n\n\nYour application must define data sources that are available for Ditto to use.  Each report definition specifies the ID of its primary data source, and Ditto looks at the corresponding data set when rendering the report.\n\n\nData sources can be either JSON or CSV format.\n\n\nJSON data\n\n\nDitto can consume dynamic data served over a REST API, or literal JS objects defined in code.  If you need to transform data before handing it to Ditto, it's best to provide data to the report using the \ndata config property\n of \nditto.render\n and \nditto.export\n.\n\n\nBelow is an example of a JSON data feed.\n\n\n[{\n    \"person_id\": \"1x39an4a92y\",\n    \"person_name\": \"John P. Smith\",\n    \"hours\": 4.75\n},{\n    \"person_id\": \"1ac43L30hR8\",\n    \"person_name\": \"Alison Jones\",\n    \"hours\": 8.5\n}]\n\n\n\n\nThis is a tabular format represented as an array of row objects.  The snippet above\ncorresponds to a table like this:\n\n\n\n\n\n\n\n\nperson_id\n\n\nperson_name\n\n\nhours\n\n\n\n\n\n\n\n\n\n\n1x39an4a92y\n\n\nJohn P. Smith\n\n\n4.75\n\n\n\n\n\n\n1ac43L30hR8\n\n\nAlison Jones\n\n\n8.5\n\n\n\n\n\n\n\n\nCSV data\n\n\nHere is an example of CSV (comma-separated) text data that represents the same table shown above:\n\n\nperson_id,person_name,hours\n1x39an4a92y,John P. Smith,4.75\n1ac43L30hR8,Alison Jones,8.5\n\n\n\n\nTo define a CSV data source, set the \nformat\n\nconfig property:\n\n\n{\n  id: \"sp500\",\n  name: \"S\n 500 Companies\",\n  url: \"data/sp500.csv\",\n  format: \"csv\",\n  hasHeaderRow: true,\n  schema_url: \"data/sp500-schema.json\"\n}\n\n\n\nData source schemas\n\n\nYou should also define a schema for each data source.  While it's possible to render\nreports without a schema, the schema is required in order to use the designer.\nThe schema describes the available columns and their data types.  \n\n\nThe most basic schema is an object with a \"fields\" property, whose value is an array\nof field definitions, each having a \"name\" and \"type\" property.  For examples, see the \nschemas included with the examples in the Ditto distribution.\n\n\nHere is a sample schema for the data source shown above:\n\n\n{\n    \"fields\": [{\n        \"name\": \"person_id\",\n        \"type\": \"string\"\n    },{\n        \"name\": \"person_name\",\n        \"type\": \"string\"\n    },{\n        \"name\": \"hours\",\n        \"type\": \"number\"\n    }]\n}\n\n\n\n\nValid data types\n\n\nThe following are the data types allowed for fields in the schema, and examples of their\nexpected representation in the corresponding data source feed:\n\n\n\n\n\n\n\n\nData type\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nstring\n\n\n\"John P. Smith\", \"Text \\\"with quotes\\\"\"\n\n\n\n\n\n\nnumber\n\n\n37.56, \"37.56\"\n\n\n\n\n\n\ndate\n\n\n\"2015-05-19\", \"2015-05-19 14:22:36\"\n\n\n\n\n\n\nboolean\n\n\ntrue, false\n\n\n\n\n\n\n\n\n Joined data sources\n\n\nYou can join two other data sources together to create a joined data source with its own ID,\nthat can then be used as the basis for a report.  The following example creates a joined\ndata source from two other data sources:\n\n\n{\n    \"fields\": [{\n        \"id\": \"states\",\n        \"url\": \"states.json\"\n    },{\n        \"id\": \"customers\",\n        \"url\": \"customers.json\"\n    },{\n        \"id\": \"states-and-customers\",\n        \"join\": {\n            \"type\": \"left\",\n            \"left\": \"states\",\n            \"leftKey\": \"state\",\n            \"right\": \"customers\",\n            \"rightKey\": \"headquartersState\"\n        }\n    }]\n}\n\n\n\n\nIn this example, the left data source is a table of states and the right is a table of\ncompanies.  leftKey and rightKey are the field names from each data source.  Rows are joined\nwhen the values in those fields are the same between both data sources.\n\n\nThis example uses a left join, meaning that all records from the left data source will be\npresent in the joined results, regardless of whether any records from the right source match that row.\nTo only return joined rows where both sides are present (inner join), use type: \"inner\".\n\n\nReport definitions\n\n\nReports are stored in a simple JSON text format.  Look in the examples directory of the\nDitto package for sample report definition files (example: grouping-report-def.json).\n\n\nManaging saved reports\n\n\nDitto includes everything needed to allow users to define and run their\nown reports.  As the developer, you'll need to provide a way to save the report\ndefinitions between sessions.\n\n\nThat means that you will need to load the correct set of reports for the current user's session\nusing your own criteria, and you will need to determine a method to save the plain-text report\ndefinition on your server when the user edits it in the designer.\n\n\nSaving report definitions on a server\n\n\nWhen the user clicks Save in the designer, Ditto will fire an event that you can listen for.\nIn your event handler, you can send the report definition to your server and store it in a database.\n\n\nExample:\n\n// Note: designer is a variable that has been initialized \n//    as in step 3 of Getting Started, above.\n$(designer).on(\"save\", function(evt, reportdef) {\n    // reportdef is a string containing the report \n    //    definition in JSON format\n    // currentUserID is an example variable that would \n    //    identify the current user\n    $.post(\"/save-report.php\", { \n      report: reportdef, \n      userid: currentUserID \n    }, function(data) {\n        alert(\"Report saved on server.\");\n    });\n});\n\n\n\nRunning reports\n\n\nIf you have a report definition in a string variable, either loaded from your server or captured in the\nSave event of the designer, you can run it (generate the report output in HTML format) by using the\nfollowing code:\n\n\n// reportDef is the string containing the report \n//    definition in JSON form\n// dataSources is a Javascript array of data sources, \n//    exactly the same as passed in step 3 of \n//    Getting Started, above\n// target is a div element on the page into which \n//    the report will be rendered\nditto.render({\n    report_def: reportDef,\n    target: $(\"#report-output\"),\n    datasets: dataSources\n});\n\n\n\n\nImages\n\n\nYou can provide a selection of images for your users to embed in reports.  Just pass an \"images\" configuration\nproperty when instantiating a designer, like this:\n\n\n// images is an array of image definition objects, \n// with name and url properties\nvar designer = new ditto.Designer({\n    images: [{\n        name: \"ACME logo\",\n        url: \"/images/acme-logo.jpg\"\n    },{\n        name: \"Product photo\",\n        url: \"/images/product1.jpg\"\n    }],\n    /* ... */\n});\n\n\n\n\nNOTE\n: In order for images to appear in browser-generated PDF reports, the URL of the image must be on the same\ndomain as the page from which the report is generated, due to browser cross-origin security policy.  Using relative\nURLs, as in the code snippet above, is one way to solve this problem.\n\n\nFonts and PDF\n\n\nPDF's built-in fonts do not support the character range required to display all non-English alphabets.  Therefore,\nby default Ditto attempts to embed and use the font \nRoboto\n \n(from Google) as the default font when generating a PDF.\n\n\nDitto looks for the Roboto font under the /fonts path relative to the ditto.libraryPath variable.\n\n\nIf you include Ditto in your page via a \nscript\n tag, Ditto may be able to infer the libraryPath correctly.\nIf you find that international characters are not appearing properly in your PDF, try manually setting the library path\nas follows:\n\n\nditto.libraryPath = '/path/to/ditto';\n\n\n\n\nThe path should be to a folder containing the \"media\" and \"fonts\" subfolders from the Ditto distribution.\n\n\nYou may also need to check the network requests being made during PDF rendering to verify that requests are being made \nto load Roboto.\n\n\n\n\n\nAPI Reference\n\n\nSee the \nAPI Reference\n for details on available classes and methods.\n\n\nWorking with Jasper Reports\n\n\nSee \nHow to use Ditto with Jasper Reports\n.\n\n\nData source configuration reference\n\n\nThe following options can be defined on a data source:\n\n\n\nspan.proptype {\n  display: block;\n  margin-left: 0;\n}\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\nstring\n\n\nThe ID used internally to refer to the data source.  This ID will appear in the report definition when the report uses this data source.\n\n\n\n\n\n\nname\nstring\n\n\nA human-friendly name for the data source, for use in the designer.\n\n\n\n\n\n\nurl\nstring\n\n\nA URL from which the (JSON) data should be fetched.  Data is expected to be in the form of a JSON array of row objects. \nOPTIONAL\n\n\n\n\n\n\nschema_url\nstring\n\n\nURL from which to fetch the JSON schema object describing the data source. \nOPTIONAL\n\n\n\n\n\n\ndata\nArray\n\n\nAn array of row objects containing the data for the data source.  Use this property when you want to load the data yourself (and possibly transform it before feeding it to Ditto). \nOPTIONAL\n\n\n\n\n\n\nschema\nObject\n\n\nThe schema object describing the data source.  You can use this instead of schema_url to pass the schema object directly. \nOPTIONAL\n\n\n\n\n\n\npostProcess\nFunction: (Array) =\n Array\n\n\nA function that will be called after loading the data source and before using it in the report.  The function receives the loaded array of row objects and should return an array of row objects.  This provides a way to transform or filter data before providing it to the report.\nOPTIONAL\n\n\n\n\n\n\nformat\nstring: [\"csv\", \"json\"]\n\n\nThe format of the data.  If \"json\" (or not provided), a JSON array of row objects is expected.  If \"csv\", a comma-separated text file is expected.\nOPTIONAL", 
            "title": "Developer Guide"
        }, 
        {
            "location": "/dev/#ditto-developer-guide", 
            "text": "Ditto is a JavaScript library that provides on-screen and print report generation for web applications.   Works with any web framework and back-end  Includes a visual report designer component to modify and create custom reports  Generates HTML, PDF, and Excel files right in the browser    See the  changelog  for latest changes.  See  Getting Started  for requirements and installation.", 
            "title": "Ditto Developer Guide"
        }, 
        {
            "location": "/dev/#json-data", 
            "text": "Ditto can consume dynamic data served over a REST API, or literal JS objects defined in code.  If you need to transform data before handing it to Ditto, it's best to provide data to the report using the  data config property  of  ditto.render  and  ditto.export .  Below is an example of a JSON data feed.  [{\n    \"person_id\": \"1x39an4a92y\",\n    \"person_name\": \"John P. Smith\",\n    \"hours\": 4.75\n},{\n    \"person_id\": \"1ac43L30hR8\",\n    \"person_name\": \"Alison Jones\",\n    \"hours\": 8.5\n}]  This is a tabular format represented as an array of row objects.  The snippet above\ncorresponds to a table like this:     person_id  person_name  hours      1x39an4a92y  John P. Smith  4.75    1ac43L30hR8  Alison Jones  8.5", 
            "title": "JSON data"
        }, 
        {
            "location": "/dev/#csv-data", 
            "text": "Here is an example of CSV (comma-separated) text data that represents the same table shown above:  person_id,person_name,hours\n1x39an4a92y,John P. Smith,4.75\n1ac43L30hR8,Alison Jones,8.5  To define a CSV data source, set the  format \nconfig property:  {\n  id: \"sp500\",\n  name: \"S  500 Companies\",\n  url: \"data/sp500.csv\",\n  format: \"csv\",\n  hasHeaderRow: true,\n  schema_url: \"data/sp500-schema.json\"\n}", 
            "title": "CSV data"
        }, 
        {
            "location": "/dev/#data-source-schemas", 
            "text": "You should also define a schema for each data source.  While it's possible to render\nreports without a schema, the schema is required in order to use the designer.\nThe schema describes the available columns and their data types.    The most basic schema is an object with a \"fields\" property, whose value is an array\nof field definitions, each having a \"name\" and \"type\" property.  For examples, see the \nschemas included with the examples in the Ditto distribution.  Here is a sample schema for the data source shown above:  {\n    \"fields\": [{\n        \"name\": \"person_id\",\n        \"type\": \"string\"\n    },{\n        \"name\": \"person_name\",\n        \"type\": \"string\"\n    },{\n        \"name\": \"hours\",\n        \"type\": \"number\"\n    }]\n}", 
            "title": "Data source schemas"
        }, 
        {
            "location": "/dev/#valid-data-types", 
            "text": "The following are the data types allowed for fields in the schema, and examples of their\nexpected representation in the corresponding data source feed:     Data type  Example      string  \"John P. Smith\", \"Text \\\"with quotes\\\"\"    number  37.56, \"37.56\"    date  \"2015-05-19\", \"2015-05-19 14:22:36\"    boolean  true, false", 
            "title": "Valid data types"
        }, 
        {
            "location": "/dev/#report-definitions", 
            "text": "Reports are stored in a simple JSON text format.  Look in the examples directory of the\nDitto package for sample report definition files (example: grouping-report-def.json).", 
            "title": "Report definitions"
        }, 
        {
            "location": "/dev/#managing-saved-reports", 
            "text": "Ditto includes everything needed to allow users to define and run their\nown reports.  As the developer, you'll need to provide a way to save the report\ndefinitions between sessions.  That means that you will need to load the correct set of reports for the current user's session\nusing your own criteria, and you will need to determine a method to save the plain-text report\ndefinition on your server when the user edits it in the designer.", 
            "title": "Managing saved reports"
        }, 
        {
            "location": "/dev/#saving-report-definitions-on-a-server", 
            "text": "When the user clicks Save in the designer, Ditto will fire an event that you can listen for.\nIn your event handler, you can send the report definition to your server and store it in a database.  Example: // Note: designer is a variable that has been initialized \n//    as in step 3 of Getting Started, above.\n$(designer).on(\"save\", function(evt, reportdef) {\n    // reportdef is a string containing the report \n    //    definition in JSON format\n    // currentUserID is an example variable that would \n    //    identify the current user\n    $.post(\"/save-report.php\", { \n      report: reportdef, \n      userid: currentUserID \n    }, function(data) {\n        alert(\"Report saved on server.\");\n    });\n});", 
            "title": "Saving report definitions on a server"
        }, 
        {
            "location": "/dev/#running-reports", 
            "text": "If you have a report definition in a string variable, either loaded from your server or captured in the\nSave event of the designer, you can run it (generate the report output in HTML format) by using the\nfollowing code:  // reportDef is the string containing the report \n//    definition in JSON form\n// dataSources is a Javascript array of data sources, \n//    exactly the same as passed in step 3 of \n//    Getting Started, above\n// target is a div element on the page into which \n//    the report will be rendered\nditto.render({\n    report_def: reportDef,\n    target: $(\"#report-output\"),\n    datasets: dataSources\n});", 
            "title": "Running reports"
        }, 
        {
            "location": "/dev/#images", 
            "text": "You can provide a selection of images for your users to embed in reports.  Just pass an \"images\" configuration\nproperty when instantiating a designer, like this:  // images is an array of image definition objects, \n// with name and url properties\nvar designer = new ditto.Designer({\n    images: [{\n        name: \"ACME logo\",\n        url: \"/images/acme-logo.jpg\"\n    },{\n        name: \"Product photo\",\n        url: \"/images/product1.jpg\"\n    }],\n    /* ... */\n});  NOTE : In order for images to appear in browser-generated PDF reports, the URL of the image must be on the same\ndomain as the page from which the report is generated, due to browser cross-origin security policy.  Using relative\nURLs, as in the code snippet above, is one way to solve this problem.", 
            "title": "Images"
        }, 
        {
            "location": "/dev/#fonts-and-pdf", 
            "text": "PDF's built-in fonts do not support the character range required to display all non-English alphabets.  Therefore,\nby default Ditto attempts to embed and use the font  Roboto  \n(from Google) as the default font when generating a PDF.  Ditto looks for the Roboto font under the /fonts path relative to the ditto.libraryPath variable.  If you include Ditto in your page via a  script  tag, Ditto may be able to infer the libraryPath correctly.\nIf you find that international characters are not appearing properly in your PDF, try manually setting the library path\nas follows:  ditto.libraryPath = '/path/to/ditto';  The path should be to a folder containing the \"media\" and \"fonts\" subfolders from the Ditto distribution.  You may also need to check the network requests being made during PDF rendering to verify that requests are being made \nto load Roboto.", 
            "title": "Fonts and PDF"
        }, 
        {
            "location": "/dev/#api-reference", 
            "text": "See the  API Reference  for details on available classes and methods.", 
            "title": "API Reference"
        }, 
        {
            "location": "/dev/#working-with-jasper-reports", 
            "text": "See  How to use Ditto with Jasper Reports .", 
            "title": "Working with Jasper Reports"
        }, 
        {
            "location": "/dev/#data-source-configuration-reference", 
            "text": "The following options can be defined on a data source:  \nspan.proptype {\n  display: block;\n  margin-left: 0;\n}     Property  Description      id string  The ID used internally to refer to the data source.  This ID will appear in the report definition when the report uses this data source.    name string  A human-friendly name for the data source, for use in the designer.    url string  A URL from which the (JSON) data should be fetched.  Data is expected to be in the form of a JSON array of row objects.  OPTIONAL    schema_url string  URL from which to fetch the JSON schema object describing the data source.  OPTIONAL    data Array  An array of row objects containing the data for the data source.  Use this property when you want to load the data yourself (and possibly transform it before feeding it to Ditto).  OPTIONAL    schema Object  The schema object describing the data source.  You can use this instead of schema_url to pass the schema object directly.  OPTIONAL    postProcess Function: (Array) =  Array  A function that will be called after loading the data source and before using it in the report.  The function receives the loaded array of row objects and should return an array of row objects.  This provides a way to transform or filter data before providing it to the report. OPTIONAL    format string: [\"csv\", \"json\"]  The format of the data.  If \"json\" (or not provided), a JSON array of row objects is expected.  If \"csv\", a comma-separated text file is expected. OPTIONAL", 
            "title": "Data source configuration reference"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\n\n\nBank statement\n\n\n\n\nUses data defined client-side in a JavaScript object\n\n\nReport defined on the fly using report builder API\n\n\nChart from sub-data in the JSON structure\n\n\nTables from sub-data in the JSON structure\n\n\nStyling report elements with CSS\n\n\n\n\n\n\n\n\n\nSimple tabular report with groupings\n\n\n\n\nNested groupings\n\n\nSummaries at various group levels\n\n\nNumber formatting\n\n\n\n\n\n\n\n\n\nCharts\n\n\n\n\nShows how to render a pie chart over grouped data\n\n\n\n\n\n\n\n\n\nReport designer\n\n\n\n\nShows how to embed the designer as a component in your web page\n\n\n\n\n\n\n\n\n\nPivot table (cross-tab)\n\n\n\n\nDemonstrates transforming data rows into columns based on unique values (pivoting)\n\n\nSummarizes data by pivot row \n column\n\n\nComputes totals against pivoted data\n\n\n\n\n\n\n\n\n\nJoined data sources\n\n\n\n\nJoins two separately defined data sources based on common keys\n\n\n\n\n\n\n\n\n\nDrill-down across data sources\n\n\n\n\nGroups data from one data source and nests related data from a second source within the top-level groups\n\n\n\n\n\n\n\n\n\nBarcode (simple printable label)\n\n\n\n\nDemonstration of precisely positioning barcode and text elements for printing labels", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#bank-statement", 
            "text": "Uses data defined client-side in a JavaScript object  Report defined on the fly using report builder API  Chart from sub-data in the JSON structure  Tables from sub-data in the JSON structure  Styling report elements with CSS", 
            "title": "Bank statement"
        }, 
        {
            "location": "/examples/#simple-tabular-report-with-groupings", 
            "text": "Nested groupings  Summaries at various group levels  Number formatting", 
            "title": "Simple tabular report with groupings"
        }, 
        {
            "location": "/examples/#charts", 
            "text": "Shows how to render a pie chart over grouped data", 
            "title": "Charts"
        }, 
        {
            "location": "/examples/#report-designer", 
            "text": "Shows how to embed the designer as a component in your web page", 
            "title": "Report designer"
        }, 
        {
            "location": "/examples/#pivot-table-cross-tab", 
            "text": "Demonstrates transforming data rows into columns based on unique values (pivoting)  Summarizes data by pivot row   column  Computes totals against pivoted data", 
            "title": "Pivot table (cross-tab)"
        }, 
        {
            "location": "/examples/#joined-data-sources", 
            "text": "Joins two separately defined data sources based on common keys", 
            "title": "Joined data sources"
        }, 
        {
            "location": "/examples/#drill-down-across-data-sources", 
            "text": "Groups data from one data source and nests related data from a second source within the top-level groups", 
            "title": "Drill-down across data sources"
        }, 
        {
            "location": "/examples/#barcode-simple-printable-label", 
            "text": "Demonstration of precisely positioning barcode and text elements for printing labels", 
            "title": "Barcode (simple printable label)"
        }, 
        {
            "location": "/designer-for-jasper-reports/", 
            "text": "Using jsreports as a designer for Jasper Reports\n\n\nIf you're already using Jasper Reports on the server, you can use the jsreports designer to edit them in the web browser. You do this by converting between jsreports report definitions and Jasper's .jrxml file format.\n\n\nNote that jsreports does not fill or render Jasper Reports - you must still use Jasper Reports itself to generate the final reports.\n\n\nLoading a Jasper report definition\n\n\nFor this example, assume you have a Jasper .jrxml report file located on your server. We will fetch that file using jQuery, convert it to a jsreports definition, and then open the report in the jsreports designer.\n\n\n// Alias JasperReportDef for brevity\nvar JasperReportDef = jsreports.integrations.jasper.JasperReportDef;\n// Fetch .jrxml file\n$.get(\"/reports/my-report.jrxml\", function(jrxml) {\n    // Convert to jsreports format\n    var reportDef = JasperReportDef.fromJRXML(jrxml);\n    // Create designer\n    var designer = new jsreports.Designer({\n        container: $(\".designer\"),\n        data_sources: [],   // Will use the embedded data source information\n        report: reportDef\n    });\n});\n\n\n\n\nIn the code above, the jsreports designer is instantiated in the normal way, except that it receives a report definition converted from JRXML instead of a standard jsreports report definition, and no data sources are provided. The designer will use the embedded data sources in the JRXML report definition.\n\n\nSaving a modified Jasper report\n\n\nAfter the report has been edited in the designer, you can convert back to JRXML to send to the server and run through Jasper Reports. Do that by listening for the designer's \"save\" event and then using the .getJasperReport() and .toJRXML() methods:\n\n\n// Listen for save event\nvar JasperReportDef = jsreports.integrations.jasper.JasperReportDef;\n// This code would come immediately after instantiating a jsreports.Designer\n$(designer).on(\"save\", function(evt, def) {\n    var jrxml = designer.getJasperReport().toJRXML();\n    // ... send JRXML to server\n});\n\n\n\n\nSetting the data fields for the report\n\n\nYou can specify the data source schema for the report by calling setSchema on the JasperReportDef object, like this:\n\n\nvar def = new jsreports.integrations.jasper.JasperReportDef();\ndef.setSchema({\n    fields: [{\n      name: 'OrderNumber',\n      type: 'number'\n    },{\n      name: 'Date',\n      type: 'date'\n    },{\n      name: 'Value',\n      type: 'number'\n    },{\n      name: 'Product',\n      type: 'text'\n    }]\n});\n\n\n\n\nIf you do this before opening the designer, the designer will have access to these fields for use in the report.\n\n\nWhen you use fromJRXML to read an existing JRXML report, the embedded schema (fields) defined in the JRXML will be used unless you call setSchema() to override them.\n\n\nJasper feature support\n\n\nBelow is a list of currently supported features. This list is subject to change.\n\n\n\n\n\n\n\n\nFeature\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nMoving and resizing elements\n\n\nSupported\n\n\n\n\n\n\nAdding and deleting elements\n\n\nSupported\n\n\n\n\n\n\nPage header/footer, report title/summary\n\n\nSupported\n\n\n\n\n\n\nGroups\n\n\nSupported\n\n\n\n\n\n\nChart elements\n\n\nSupport for modifying data series for line, pie, and bar chart types\n\n\n\n\n\n\nText formulas and expressions\n\n\nSupports any text expression, with support for auto-suggestion of field names\n\n\n\n\n\n\nBarcode elements\n\n\nCertain encodings supported\n\n\n\n\n\n\nImage elements\n\n\nSupported\n\n\n\n\n\n\nBox elements\n\n\nSupported\n\n\n\n\n\n\nJasper element types not listed above\n\n\nSupport for adding, moving, resizing and deleting elements\n\n\n\n\n\n\n\n\nNeed any help?\n\n\n\n  Questions? Need help getting things working? We're happy to help any time. \nAsk a question on Stack Overflow\n (tag: jsreports), and we'll get back to you ASAP.", 
            "title": "Integration: Jasper Reports"
        }, 
        {
            "location": "/designer-for-jasper-reports/#using-jsreports-as-a-designer-for-jasper-reports", 
            "text": "If you're already using Jasper Reports on the server, you can use the jsreports designer to edit them in the web browser. You do this by converting between jsreports report definitions and Jasper's .jrxml file format.  Note that jsreports does not fill or render Jasper Reports - you must still use Jasper Reports itself to generate the final reports.", 
            "title": "Using jsreports as a designer for Jasper Reports"
        }, 
        {
            "location": "/designer-for-jasper-reports/#loading-a-jasper-report-definition", 
            "text": "For this example, assume you have a Jasper .jrxml report file located on your server. We will fetch that file using jQuery, convert it to a jsreports definition, and then open the report in the jsreports designer.  // Alias JasperReportDef for brevity\nvar JasperReportDef = jsreports.integrations.jasper.JasperReportDef;\n// Fetch .jrxml file\n$.get(\"/reports/my-report.jrxml\", function(jrxml) {\n    // Convert to jsreports format\n    var reportDef = JasperReportDef.fromJRXML(jrxml);\n    // Create designer\n    var designer = new jsreports.Designer({\n        container: $(\".designer\"),\n        data_sources: [],   // Will use the embedded data source information\n        report: reportDef\n    });\n});  In the code above, the jsreports designer is instantiated in the normal way, except that it receives a report definition converted from JRXML instead of a standard jsreports report definition, and no data sources are provided. The designer will use the embedded data sources in the JRXML report definition.", 
            "title": "Loading a Jasper report definition"
        }, 
        {
            "location": "/designer-for-jasper-reports/#saving-a-modified-jasper-report", 
            "text": "After the report has been edited in the designer, you can convert back to JRXML to send to the server and run through Jasper Reports. Do that by listening for the designer's \"save\" event and then using the .getJasperReport() and .toJRXML() methods:  // Listen for save event\nvar JasperReportDef = jsreports.integrations.jasper.JasperReportDef;\n// This code would come immediately after instantiating a jsreports.Designer\n$(designer).on(\"save\", function(evt, def) {\n    var jrxml = designer.getJasperReport().toJRXML();\n    // ... send JRXML to server\n});", 
            "title": "Saving a modified Jasper report"
        }, 
        {
            "location": "/designer-for-jasper-reports/#setting-the-data-fields-for-the-report", 
            "text": "You can specify the data source schema for the report by calling setSchema on the JasperReportDef object, like this:  var def = new jsreports.integrations.jasper.JasperReportDef();\ndef.setSchema({\n    fields: [{\n      name: 'OrderNumber',\n      type: 'number'\n    },{\n      name: 'Date',\n      type: 'date'\n    },{\n      name: 'Value',\n      type: 'number'\n    },{\n      name: 'Product',\n      type: 'text'\n    }]\n});  If you do this before opening the designer, the designer will have access to these fields for use in the report.  When you use fromJRXML to read an existing JRXML report, the embedded schema (fields) defined in the JRXML will be used unless you call setSchema() to override them.", 
            "title": "Setting the data fields for the report"
        }, 
        {
            "location": "/designer-for-jasper-reports/#jasper-feature-support", 
            "text": "Below is a list of currently supported features. This list is subject to change.     Feature  Support      Moving and resizing elements  Supported    Adding and deleting elements  Supported    Page header/footer, report title/summary  Supported    Groups  Supported    Chart elements  Support for modifying data series for line, pie, and bar chart types    Text formulas and expressions  Supports any text expression, with support for auto-suggestion of field names    Barcode elements  Certain encodings supported    Image elements  Supported    Box elements  Supported    Jasper element types not listed above  Support for adding, moving, resizing and deleting elements", 
            "title": "Jasper feature support"
        }, 
        {
            "location": "/designer-for-jasper-reports/#need-any-help", 
            "text": "Questions? Need help getting things working? We're happy to help any time.  Ask a question on Stack Overflow  (tag: jsreports), and we'll get back to you ASAP.", 
            "title": "Need any help?"
        }, 
        {
            "location": "/api/", 
            "text": "ditto : \nobject\n\n\nKind\n: global namespace  \n\n\n\n\nditto\n : \nobject\n\n\n.Designer\n\n\nnew ditto.Designer(options)\n\n\n.dataPaneHeight\n\n\n.addConditionalPropertiesButtonToToolbar()\n\n\n.fit_section()\n\n\n.getDataSectionFromGroupingControl()\n\n\n.getJasperReport()\n \u21d2 \nObject\n\n\n.getMinDefaultSectionHeight()\n\n\n.getReport()\n \u21d2 \nObject\n\n\n.getSchemaForDataSection()\n\n\n.getSchemaForSectionEntry()\n\n\n.getSelectedElementContext()\n\n\n.onElementEvent()\n\n\n.renderDataSectionControls()\n\n\n.setReport()\n\n\n\"save\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nditto.Designer\n\n\nA drag-and-drop report designer component.\n\n\nKind\n: static class of \nditto\n  \n\n\n\n\n.Designer\n\n\nnew ditto.Designer(options)\n\n\n.dataPaneHeight\n\n\n.addConditionalPropertiesButtonToToolbar()\n\n\n.fit_section()\n\n\n.getDataSectionFromGroupingControl()\n\n\n.getJasperReport()\n \u21d2 \nObject\n\n\n.getMinDefaultSectionHeight()\n\n\n.getReport()\n \u21d2 \nObject\n\n\n.getSchemaForDataSection()\n\n\n.getSchemaForSectionEntry()\n\n\n.getSelectedElementContext()\n\n\n.onElementEvent()\n\n\n.renderDataSectionControls()\n\n\n.setReport()\n\n\n\"save\"\n\n\n\n\n\n\n\n\n\n\nnew ditto.Designer(options)\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\n\n\n\n\n\n\n[options.reportDef]\n\n\nstring\n\n\nThe report definition object to edit.  If not provided, the designer will be empty.\n\n\n\n\n\n\noptions.dataSources\n\n\nArray\n\n\nArray of configuration objects for the available data sources for reports.\n\n\n\n\n\n\noptions.images\n\n\nArray\n\n\nAvailable images that can be used by the report.  Each array element should contain the following properties: \nname (String) A description of the image\nurl (String) The location of the image\n\n\n\n\n\n\noptions.embedded\n\n\nboolean\n\n\nTrue to embed the designer in an element on the page (requires \ncontainer\n config).  False to show designer in a popup.  Default: false.\n\n\n\n\n\n\noptions.container\n\n\nHTMLElement\n\n\nWhen \nembedded\n is true, the element into which to render the designer.\n\n\n\n\n\n\noptions.toolbarPosition\n\n\nstring\n\n\nControls where the toolbar for editing elements appears.  Options:\ntop - Appears above report canvas\nbottom - Appears below report canvas\nfloat - Appears floating just below the selected element\nDefault: top\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar designer = new ditto.Designer({\n    data_sources: [ ... ],\n    report_def: { ... },\n    images: [ ... ],\n    toolbarPosition: \ntop\n,\n    embedded: true,\n    container: $(\n#reportDesigner\n)\n});\n\n\n\n\n\n\ndesigner.dataPaneHeight\n\n\nUser-supplied function returns true if it handles the event and we don't\n\n\nKind\n: instance property of \nDesigner\n\n\n\n\ndesigner.addConditionalPropertiesButtonToToolbar()\n\n\nTakes the template div for jqtoolbar (for example, the one returned\nby create_text_toolbar) and adds the template item for the conditional\nproperties button.  This button will need to be bound to the actual\ntoolbar instance via bindConditionalPropertiesButton().\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.fit_section()\n\n\nIncrease section height if needed to contain its elements.  Returns whether\nor not the section height was changed.\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.getDataSectionFromGroupingControl()\n\n\nHelper fn to find data section owning a grouping input\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.getJasperReport() \u21d2 \nObject\n\n\nKind\n: instance method of \nDesigner\n\n\nReturns\n: \nObject\n - The current Jasper report definition object when in Jasper mode\n\n\nAccess:\n public\n\n\n\n\ndesigner.getMinDefaultSectionHeight()\n\n\nThe minimum height to apply when making a section visible again via a checkbox\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.getReport() \u21d2 \nObject\n\n\nKind\n: instance method of \nDesigner\n\n\nReturns\n: \nObject\n - The current active report definition object, possibly unsaved, possibly null if none loaded\n\n\nAccess:\n public\n\n\n\n\ndesigner.getSchemaForDataSection()\n\n\nExpects dataSection def (raw body definition object)\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.getSchemaForSectionEntry()\n\n\nFrom a section entry wrapper object (visible section in template rendering),\nget the data source schema for that section.\nCheck upward from a detail section or sub-level (group header/footer) to the first\nnon-inherited data source (non-\"__parentgroup\").\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.getSelectedElementContext()\n\n\nGet context about how the element is situated within the report\n(available data sources, etc) to pass to the element class to generate its\ntoolbar options\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.onElementEvent()\n\n\nCalled by element instances when they raise an event\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.renderDataSectionControls()\n\n\nRender the left-side config controls for a single data section (inside accordion)\n\n\nKind\n: instance method of \nDesigner\n\n\n\n\ndesigner.setReport()\n\n\nKind\n: instance method of \nDesigner\n\n\nAccess:\n public\n\n\n\n\n\"save\"\n\n\nSave event.\n\n\nKind\n: event emitted by \nDesigner\n\n\nProperties\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreportJson\n\n\nboolean\n\n\nJSON string containing report definition", 
            "title": "API Reference"
        }, 
        {
            "location": "/api/#ditto-object", 
            "text": "Kind : global namespace     ditto  :  object  .Designer  new ditto.Designer(options)  .dataPaneHeight  .addConditionalPropertiesButtonToToolbar()  .fit_section()  .getDataSectionFromGroupingControl()  .getJasperReport()  \u21d2  Object  .getMinDefaultSectionHeight()  .getReport()  \u21d2  Object  .getSchemaForDataSection()  .getSchemaForSectionEntry()  .getSelectedElementContext()  .onElementEvent()  .renderDataSectionControls()  .setReport()  \"save\"", 
            "title": "ditto : object"
        }, 
        {
            "location": "/api/#dittodesigner", 
            "text": "A drag-and-drop report designer component.  Kind : static class of  ditto      .Designer  new ditto.Designer(options)  .dataPaneHeight  .addConditionalPropertiesButtonToToolbar()  .fit_section()  .getDataSectionFromGroupingControl()  .getJasperReport()  \u21d2  Object  .getMinDefaultSectionHeight()  .getReport()  \u21d2  Object  .getSchemaForDataSection()  .getSchemaForSectionEntry()  .getSelectedElementContext()  .onElementEvent()  .renderDataSectionControls()  .setReport()  \"save\"", 
            "title": "ditto.Designer"
        }, 
        {
            "location": "/api/#new-dittodesigneroptions", 
            "text": "Param  Type  Description      options  Object     [options.reportDef]  string  The report definition object to edit.  If not provided, the designer will be empty.    options.dataSources  Array  Array of configuration objects for the available data sources for reports.    options.images  Array  Available images that can be used by the report.  Each array element should contain the following properties:  name (String) A description of the image url (String) The location of the image    options.embedded  boolean  True to embed the designer in an element on the page (requires  container  config).  False to show designer in a popup.  Default: false.    options.container  HTMLElement  When  embedded  is true, the element into which to render the designer.    options.toolbarPosition  string  Controls where the toolbar for editing elements appears.  Options: top - Appears above report canvas bottom - Appears below report canvas float - Appears floating just below the selected element Default: top     Example     var designer = new ditto.Designer({\n    data_sources: [ ... ],\n    report_def: { ... },\n    images: [ ... ],\n    toolbarPosition:  top ,\n    embedded: true,\n    container: $( #reportDesigner )\n});", 
            "title": "new ditto.Designer(options)"
        }, 
        {
            "location": "/api/#designerdatapaneheight", 
            "text": "User-supplied function returns true if it handles the event and we don't  Kind : instance property of  Designer", 
            "title": "designer.dataPaneHeight"
        }, 
        {
            "location": "/api/#designeraddconditionalpropertiesbuttontotoolbar", 
            "text": "Takes the template div for jqtoolbar (for example, the one returned\nby create_text_toolbar) and adds the template item for the conditional\nproperties button.  This button will need to be bound to the actual\ntoolbar instance via bindConditionalPropertiesButton().  Kind : instance method of  Designer", 
            "title": "designer.addConditionalPropertiesButtonToToolbar()"
        }, 
        {
            "location": "/api/#designerfit_section", 
            "text": "Increase section height if needed to contain its elements.  Returns whether\nor not the section height was changed.  Kind : instance method of  Designer", 
            "title": "designer.fit_section()"
        }, 
        {
            "location": "/api/#designergetdatasectionfromgroupingcontrol", 
            "text": "Helper fn to find data section owning a grouping input  Kind : instance method of  Designer", 
            "title": "designer.getDataSectionFromGroupingControl()"
        }, 
        {
            "location": "/api/#designergetjasperreport-object", 
            "text": "Kind : instance method of  Designer  Returns :  Object  - The current Jasper report definition object when in Jasper mode  Access:  public", 
            "title": "designer.getJasperReport() \u21d2 Object"
        }, 
        {
            "location": "/api/#designergetmindefaultsectionheight", 
            "text": "The minimum height to apply when making a section visible again via a checkbox  Kind : instance method of  Designer", 
            "title": "designer.getMinDefaultSectionHeight()"
        }, 
        {
            "location": "/api/#designergetreport-object", 
            "text": "Kind : instance method of  Designer  Returns :  Object  - The current active report definition object, possibly unsaved, possibly null if none loaded  Access:  public", 
            "title": "designer.getReport() \u21d2 Object"
        }, 
        {
            "location": "/api/#designergetschemafordatasection", 
            "text": "Expects dataSection def (raw body definition object)  Kind : instance method of  Designer", 
            "title": "designer.getSchemaForDataSection()"
        }, 
        {
            "location": "/api/#designergetschemaforsectionentry", 
            "text": "From a section entry wrapper object (visible section in template rendering),\nget the data source schema for that section.\nCheck upward from a detail section or sub-level (group header/footer) to the first\nnon-inherited data source (non-\"__parentgroup\").  Kind : instance method of  Designer", 
            "title": "designer.getSchemaForSectionEntry()"
        }, 
        {
            "location": "/api/#designergetselectedelementcontext", 
            "text": "Get context about how the element is situated within the report\n(available data sources, etc) to pass to the element class to generate its\ntoolbar options  Kind : instance method of  Designer", 
            "title": "designer.getSelectedElementContext()"
        }, 
        {
            "location": "/api/#designeronelementevent", 
            "text": "Called by element instances when they raise an event  Kind : instance method of  Designer", 
            "title": "designer.onElementEvent()"
        }, 
        {
            "location": "/api/#designerrenderdatasectioncontrols", 
            "text": "Render the left-side config controls for a single data section (inside accordion)  Kind : instance method of  Designer", 
            "title": "designer.renderDataSectionControls()"
        }, 
        {
            "location": "/api/#designersetreport", 
            "text": "Kind : instance method of  Designer  Access:  public", 
            "title": "designer.setReport()"
        }, 
        {
            "location": "/api/#save", 
            "text": "Save event.  Kind : event emitted by  Designer  Properties     Name  Type  Description      reportJson  boolean  JSON string containing report definition", 
            "title": "\"save\""
        }, 
        {
            "location": "/reportbuilder-api/", 
            "text": "ReportBuilder\n\n\nProvides an API for programmatic construction of report definitions.  Use \nditto.createReport()\n\nto get a new ReportBuilder, as shown in the example below.\n\n\nKind\n: global class  \n\n\n\n\nReportBuilder\n\n\nnew ReportBuilder()\n\n\n.background()\n\n\n.barcode(value, encoding, left, top, width, height, opts)\n\n\n.box(fill, stroke, left, top, width, height, opts)\n\n\n.chart(chartType, [valueField], [labelField], left, top, width, height, opts)\n\n\n.column(width, detail, [header], [footer], [opts])\n\n\n.columnFooter(height)\n\n\n.columnHeader(height)\n\n\n.data(dataSourceId)\n\n\n.detail()\n\n\n.detailHeight()\n\n\n.done()\n\n\n.element()\n\n\n.filterBy(field, comparison, compareTo)\n\n\n.footer(height)\n\n\n.groupBy(groupBy, [sortBy], [sortDir])\n\n\n.header(height)\n\n\n.hideDetail()\n\n\n.image(url, left, top, width, height, opts)\n\n\n.input(name, type, [defaultValue])\n\n\n.margins(top, right, bottom, left)\n\n\n.name(name)\n\n\n.page(width, height, units)\n\n\n.pageFooter(height)\n\n\n.pageHeader(height)\n\n\n.series(valueField, [labelField], [colorField])\n\n\n.showDetail()\n\n\n.sortDetailBy(sortBy, [sortDir])\n\n\n.table(left, top, width, height, opts)\n\n\n.text(text, left, top, width, height, opts)\n\n\n.toString()\n\n\n\n\n\n\n\n\n\n\nnew ReportBuilder()\n\n\nDo not call directly.  Use \nditto.createReport()\n to get a new ReportBuilder.\n\n\nExample\n  \n\n\n// Create a new report definition\nvar reportDef = ditto.createReport()\n .data(\ntime\n)\n .groupBy(\nClient_ID\n)\n   .header()\n     .text(\nGroup header text\n)\n   .footer()\n     .text(\nGroup footer\n)\n .detail()\n   .text(\nDetail with [data]\n)\n .input('Client', 'text')\n .filterBy('Client_name', 'contains', '[?Client]')\n .done();\n\n// Render the report\nditto.render({\n  report_def: reportDef,\n  datasets: myDataSets,  // defined elsewhere\n  target: $('#myDiv')\n});\n\n\n\n\n\n\n.background()\n\n\nAdd a page background to the report.  The page background can contain the same\nkinds of elements as other sections.  The background is rendered once on each\npage in PDF mode and once at the top of the report in HTML mode.\n\n\nKind\n: instance method of \nReportBuilder\n\n\n\n\n.barcode(value, encoding, left, top, width, height, opts)\n\n\nAdd a barcode element at the specified location.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nstring\n\n\nThe expression to be evaluated and displayed as a barcode\n\n\n\n\n\n\nencoding\n\n\nstring\n\n\nOne of CODE39, CODE128, UPC, ITF14, pharmacode, QR\n\n\n\n\n\n\nleft\n\n\nnumber\n\n\nThe distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin\n\n\n\n\n\n\ntop\n\n\nnumber\n\n\nThe distance from the top edge of the section to the top edge of the element, in report units\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe width of the element in report units\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the element in report units\n\n\n\n\n\n\nopts\n\n\nobject\n\n\nAn object containing additional properties to apply to the element\n\n\n\n\n\n\n\n\n\n\n.box(fill, stroke, left, top, width, height, opts)\n\n\nAdd a box element at the specified location.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfill\n\n\nstring\n\n\nThe hex color code of the fill color, or 'transparent' (e.g. '#fc0')\n\n\n\n\n\n\nstroke\n\n\nstring\n\n\nThe hex color code of the border color, or 'transparent' (e.g. '#000')\n\n\n\n\n\n\nleft\n\n\nnumber\n\n\nThe distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin\n\n\n\n\n\n\ntop\n\n\nnumber\n\n\nThe distance from the top edge of the section to the top edge of the element, in report units\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe width of the element in report units\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the element in report units\n\n\n\n\n\n\nopts\n\n\nobject\n\n\nAn object containing additional properties to apply to the element\n\n\n\n\n\n\n\n\n\n\n.chart(chartType, [valueField], [labelField], left, top, width, height, opts)\n\n\nAdd a chart element at the specified location.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchartType\n\n\nstring\n\n\nOne of 'line', 'bar', 'pie'\n\n\n\n\n\n\n[valueField]\n\n\nstring\n\n\nThe data field containing the y-values for line and bar charts, and slice sizes for pie charts\n\n\n\n\n\n\n[labelField]\n\n\nstring\n\n\nThe field containing slice labels for pie charts\n\n\n\n\n\n\nleft\n\n\nnumber\n\n\nThe distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin\n\n\n\n\n\n\ntop\n\n\nnumber\n\n\nThe distance from the top edge of the section to the top edge of the element, in report units\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe width of the element in report units\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the element in report units\n\n\n\n\n\n\nopts\n\n\nobject\n\n\nAn object containing additional properties to apply to the element\n\n\n\n\n\n\n\n\n\n\n.column(width, detail, [header], [footer], [opts])\n\n\nAdd a data series to the previously added table element (see \ntable\n)\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwidth\n\n\nstring\n \n \nnumber\n\n\nThe width of the column, either a percentage of the table width (e.g. '100%') or a number in report units (e.g. 4 meaning 4 inches)\n\n\n\n\n\n\ndetail\n\n\nstring\n\n\nThe text expression to evaluate and render in each detail cell in this column\n\n\n\n\n\n\n[header]\n\n\nstring\n\n\nThe text expression to evaluate and render in the table header cell in this column (or null)\n\n\n\n\n\n\n[footer]\n\n\nstring\n\n\nThe text expression to evaluate and render in the table footer cell in this column (or null)\n\n\n\n\n\n\n[opts]\n\n\nobject\n\n\nAn object containing additional properties to apply to the column\n\n\n\n\n\n\n\n\n\n\n.columnFooter(height)\n\n\nAdd a column header to the report.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the header, in report units (inches or mm).\n\n\n\n\n\n\n\n\n\n\n.columnHeader(height)\n\n\nAdd a column header to the report.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the header, in report units (inches or mm).\n\n\n\n\n\n\n\n\n\n\n.data(dataSourceId)\n\n\nBegins a data section in the report using the specified data source ID.\nWhen called multiple times, adds additional data sections below the first,\neach allowing nested grouping within its own data source via subsequent\ncalls to groupBy, header, footer, detail, etc.\nThis should be one of the first methods you call when using the\nreport builder API to define a report.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndataSourceId\n\n\nstring\n\n\nThe ID of the data source; must match a defined data source ID   when the report runs\n\n\n\n\n\n\n\n\n\n\n.detail()\n\n\nMove to the detail of the current data section\n\n\nKind\n: instance method of \nReportBuilder\n\n\n\n\n.detailHeight()\n\n\nSet the height of the report's detail section, in report units (inches or mm).\n\n\nKind\n: instance method of \nReportBuilder\n\n\n\n\n.done()\n\n\nReturn the report definition in object form.  Call this at the end of a chain of calls that define the report.\nThe object returned by this method is the report definition that you can pass to ditto.render()\nor ditto.export().\n\n\nKind\n: instance method of \nReportBuilder\n\n\nExample\n  \n\n\n// Define a simple report with one text element\nvar reportDef = ditto.createReport()\n  .data('mydata')\n  .text('Data value is [myfield]')\n  .done();\n\n\n\n\n\n\n.element()\n\n\nAdd an element by its type ID - for custom elements\n\n\nKind\n: instance method of \nReportBuilder\n\n\n\n\n.filterBy(field, comparison, compareTo)\n\n\nAdd a filter to restrict which records are shown in the report.\nTo filter by a user input, use \n'[?InputName]'\n syntax\nin the compareTo argument.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nstring\n\n\nName of the data field to filter\n\n\n\n\n\n\ncomparison\n\n\nstring\n\n\nOne of: is, isnot, contains, doesnotcontain, gt, lt, gte, lte\n\n\n\n\n\n\ncompareTo\n\n\nstring\n\n\nExpression against which the data field will be compared\n\n\n\n\n\n\n\n\n\n\n.footer(height)\n\n\nAdd a footer to the current level.  By default, the level is the report itself;\nif \ngroupBy\n has been called, then the footer will be added to the most recent\ngrouping level.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the footer, in report units (inches or mm).\n\n\n\n\n\n\n\n\n\n\n.groupBy(groupBy, [sortBy], [sortDir])\n\n\nAdd a new sub-grouping.  If groupBy has already been called, this adds a sub-grouping beneath that grouping.\nRecords will be grouped by the values in the groupBy data field and the groups will be arranged relative to each\nother based on the sortBy data field, if specified.  Groups do not have headers or footers by default; use\n\naddHeader\n and \naddFooter\n to add them.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupBy\n\n\nstring\n\n\nThe data field containing the values defining the groups\n\n\n\n\n\n\n[sortBy]\n\n\nstring\n\n\nThe data field by which groups should be sorted relative to each other (default: same as groupBy)\n\n\n\n\n\n\n[sortDir]\n\n\nstring\n\n\nOne of: 'asc', 'desc' (ascending = A-Z, 0-9) (default: 'asc')\n\n\n\n\n\n\n\n\n\n\n.header(height)\n\n\nAdd a header to the current level.  By default, the level is the report itself;\nif \ngroupBy\n has been called, then the header will be added to the most recent\ngrouping level.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the header, in report units (inches or mm).\n\n\n\n\n\n\n\n\n\n\n.hideDetail()\n\n\nMake the report's detail section invisible.\n\n\nKind\n: instance method of \nReportBuilder\n\n\n\n\n.image(url, left, top, width, height, opts)\n\n\nAdd an image element at the specified location.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe url of the image, either relative or absolute\n\n\n\n\n\n\nleft\n\n\nnumber\n\n\nThe distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin\n\n\n\n\n\n\ntop\n\n\nnumber\n\n\nThe distance from the top edge of the section to the top edge of the element, in report units\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe width of the element in report units\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the element in report units\n\n\n\n\n\n\nopts\n\n\nobject\n\n\nAn object containing additional properties to apply to the element\n\n\n\n\n\n\n\n\n\n\n.input(name, type, [defaultValue])\n\n\nAdd a user input to the report.  Inputs appear in the report viewer toolbar\nand allow you to filter the report by user-provided values.  To filter by\nan input value, see \naddFilter\n.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nUser-visible name of the input field\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nOne of \"text\", \"number\", \"date\"\n\n\n\n\n\n\n[defaultValue]\n\n\nstring\n\n\nThe default value for the input\n\n\n\n\n\n\n\n\n\n\n.margins(top, right, bottom, left)\n\n\nSet the page margins for the report.  Margins will use the units defined\nfor the report in setPage, or inches if setPage is not called.\nIf only one argument is supplied, it will be used for all four margins.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntop\n\n\nnumber\n\n\nThe top margin height, in report units (inches or mm).\n\n\n\n\n\n\nright\n\n\nnumber\n\n\nThe right margin width, in report units.\n\n\n\n\n\n\nbottom\n\n\nnumber\n\n\nThe bottom margin height, in report units.\n\n\n\n\n\n\nleft\n\n\nnumber\n\n\nThe left margin width, in report units.\n\n\n\n\n\n\n\n\n\n\n.name(name)\n\n\nSet the report's name (used to generate filenames for download)\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nThe new name for the report\n\n\n\n\n\n\n\n\n\n\n.page(width, height, units)\n\n\nSet page dimensions for the report.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe width of the page, in report units (inches or mm).\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the page, in report units (inches or mm).\n\n\n\n\n\n\nunits\n\n\nstring\n\n\nThe report units ('in' or 'mm'), defaults to inches\n\n\n\n\n\n\n\n\nExample\n  \n\n\n// Set the report to 8.5 x 11 inches (US letter size)\nditto.createReport()\n  .setPage(8.5, 11, \ninches\n)\n\n\n\n\n\n\n.pageFooter(height)\n\n\nAdd a page footer to the report.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the footer, in report units (inches or mm).\n\n\n\n\n\n\n\n\n\n\n.pageHeader(height)\n\n\nAdd a page header to the report.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the header, in report units (inches or mm).\n\n\n\n\n\n\n\n\n\n\n.series(valueField, [labelField], [colorField])\n\n\nAdd a data series to the previously added chart element (see \nchart\n)\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalueField\n\n\nstring\n\n\nThe data field containing the y-values for line and bar charts, and slice sizes for pie charts\n\n\n\n\n\n\n[labelField]\n\n\nstring\n\n\nThe field containing slice labels for pie charts\n\n\n\n\n\n\n[colorField]\n\n\nstring\n\n\nThe field containing slice labels for pie charts\n\n\n\n\n\n\n\n\n\n\n.showDetail()\n\n\nMake the report's detail section visible.\n\n\nKind\n: instance method of \nReportBuilder\n\n\n\n\n.sortDetailBy(sortBy, [sortDir])\n\n\nOrder records in the report detail section by the given data field, in the given direction.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsortBy\n\n\nstring\n\n\nThe name of the data field by which to sort\n\n\n\n\n\n\n[sortDir]\n\n\nstring\n\n\nOne of: 'asc', 'desc' (ascending = A-Z, 0-9) (default: 'asc')\n\n\n\n\n\n\n\n\n\n\n.table(left, top, width, height, opts)\n\n\nAdd a table element at the specified location.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nleft\n\n\nnumber\n\n\nThe distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin\n\n\n\n\n\n\ntop\n\n\nnumber\n\n\nThe distance from the top edge of the section to the top edge of the element, in report units\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe width of the element in report units\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the element in report units\n\n\n\n\n\n\nopts\n\n\nobject\n\n\nAn object containing additional properties to apply to the element\n\n\n\n\n\n\n\n\nExample\n  \n\n\n.table(0, 1.25, 4.75, 2.5, { data: 'changeItems', hasFooter: true, \n    groupBy: 'category', fontSize: 9, hideRowWhenExpr: '!description' \n})\n.column('50%', '\u2007\u2007\u2007[description]', '', '', { \n    align: 'left', group0Header: '[category]' })\n.column('25%', '[currentPeriod]', 'This Period', '[SUM(currentPeriod)]', { \n    align: 'right',\n    detailStyle: {\n        pattern: '#,##0.00'\n    },\n    group0Header: '[SUM(currentPeriod)]',\n    group0HeaderStyle: {\n        pattern: '#,##0.00'\n    }\n})\n.column('25%', '[ytd]', 'Year-to-Date', '[SUM(ytd)]', { \n    align: 'right',\n    detailStyle: {\n        pattern: '#,##0.00'\n    },\n    group0Header: '[SUM(ytd)]',\n    group0HeaderStyle: {\n        pattern: '#,##0.00'\n    }\n})\n\n\n\n\n\n\n.text(text, left, top, width, height, opts)\n\n\nAdd a text element at the specified location.\n\n\nKind\n: instance method of \nReportBuilder\n  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nThe content of the text element.\n\n\n\n\n\n\nleft\n\n\nnumber\n\n\nThe distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin\n\n\n\n\n\n\ntop\n\n\nnumber\n\n\nThe distance from the top edge of the section to the top edge of the element, in report units\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe width of the element in report units\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the element in report units\n\n\n\n\n\n\nopts\n\n\nobject\n\n\nAn object containing additional properties to apply to the element\n\n\n\n\n\n\n\n\n\n\n.toString()\n\n\nLike \ndone()\n, but returns the report definition in string format.\n\n\nKind\n: instance method of \nReportBuilder", 
            "title": "Report Builder API"
        }, 
        {
            "location": "/reportbuilder-api/#reportbuilder", 
            "text": "Provides an API for programmatic construction of report definitions.  Use  ditto.createReport() \nto get a new ReportBuilder, as shown in the example below.  Kind : global class     ReportBuilder  new ReportBuilder()  .background()  .barcode(value, encoding, left, top, width, height, opts)  .box(fill, stroke, left, top, width, height, opts)  .chart(chartType, [valueField], [labelField], left, top, width, height, opts)  .column(width, detail, [header], [footer], [opts])  .columnFooter(height)  .columnHeader(height)  .data(dataSourceId)  .detail()  .detailHeight()  .done()  .element()  .filterBy(field, comparison, compareTo)  .footer(height)  .groupBy(groupBy, [sortBy], [sortDir])  .header(height)  .hideDetail()  .image(url, left, top, width, height, opts)  .input(name, type, [defaultValue])  .margins(top, right, bottom, left)  .name(name)  .page(width, height, units)  .pageFooter(height)  .pageHeader(height)  .series(valueField, [labelField], [colorField])  .showDetail()  .sortDetailBy(sortBy, [sortDir])  .table(left, top, width, height, opts)  .text(text, left, top, width, height, opts)  .toString()", 
            "title": "ReportBuilder"
        }, 
        {
            "location": "/reportbuilder-api/#new-reportbuilder", 
            "text": "Do not call directly.  Use  ditto.createReport()  to get a new ReportBuilder.  Example     // Create a new report definition\nvar reportDef = ditto.createReport()\n .data( time )\n .groupBy( Client_ID )\n   .header()\n     .text( Group header text )\n   .footer()\n     .text( Group footer )\n .detail()\n   .text( Detail with [data] )\n .input('Client', 'text')\n .filterBy('Client_name', 'contains', '[?Client]')\n .done();\n\n// Render the report\nditto.render({\n  report_def: reportDef,\n  datasets: myDataSets,  // defined elsewhere\n  target: $('#myDiv')\n});", 
            "title": "new ReportBuilder()"
        }, 
        {
            "location": "/reportbuilder-api/#background", 
            "text": "Add a page background to the report.  The page background can contain the same\nkinds of elements as other sections.  The background is rendered once on each\npage in PDF mode and once at the top of the report in HTML mode.  Kind : instance method of  ReportBuilder", 
            "title": ".background()"
        }, 
        {
            "location": "/reportbuilder-api/#barcodevalue-encoding-left-top-width-height-opts", 
            "text": "Add a barcode element at the specified location.  Kind : instance method of  ReportBuilder        Param  Type  Description      value  string  The expression to be evaluated and displayed as a barcode    encoding  string  One of CODE39, CODE128, UPC, ITF14, pharmacode, QR    left  number  The distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin    top  number  The distance from the top edge of the section to the top edge of the element, in report units    width  number  The width of the element in report units    height  number  The height of the element in report units    opts  object  An object containing additional properties to apply to the element", 
            "title": ".barcode(value, encoding, left, top, width, height, opts)"
        }, 
        {
            "location": "/reportbuilder-api/#boxfill-stroke-left-top-width-height-opts", 
            "text": "Add a box element at the specified location.  Kind : instance method of  ReportBuilder        Param  Type  Description      fill  string  The hex color code of the fill color, or 'transparent' (e.g. '#fc0')    stroke  string  The hex color code of the border color, or 'transparent' (e.g. '#000')    left  number  The distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin    top  number  The distance from the top edge of the section to the top edge of the element, in report units    width  number  The width of the element in report units    height  number  The height of the element in report units    opts  object  An object containing additional properties to apply to the element", 
            "title": ".box(fill, stroke, left, top, width, height, opts)"
        }, 
        {
            "location": "/reportbuilder-api/#chartcharttype-91valuefield93-91labelfield93-left-top-width-height-opts", 
            "text": "Add a chart element at the specified location.  Kind : instance method of  ReportBuilder        Param  Type  Description      chartType  string  One of 'line', 'bar', 'pie'    [valueField]  string  The data field containing the y-values for line and bar charts, and slice sizes for pie charts    [labelField]  string  The field containing slice labels for pie charts    left  number  The distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin    top  number  The distance from the top edge of the section to the top edge of the element, in report units    width  number  The width of the element in report units    height  number  The height of the element in report units    opts  object  An object containing additional properties to apply to the element", 
            "title": ".chart(chartType, [valueField], [labelField], left, top, width, height, opts)"
        }, 
        {
            "location": "/reportbuilder-api/#columnwidth-detail-91header93-91footer93-91opts93", 
            "text": "Add a data series to the previously added table element (see  table )  Kind : instance method of  ReportBuilder        Param  Type  Description      width  string     number  The width of the column, either a percentage of the table width (e.g. '100%') or a number in report units (e.g. 4 meaning 4 inches)    detail  string  The text expression to evaluate and render in each detail cell in this column    [header]  string  The text expression to evaluate and render in the table header cell in this column (or null)    [footer]  string  The text expression to evaluate and render in the table footer cell in this column (or null)    [opts]  object  An object containing additional properties to apply to the column", 
            "title": ".column(width, detail, [header], [footer], [opts])"
        }, 
        {
            "location": "/reportbuilder-api/#columnfooterheight", 
            "text": "Add a column header to the report.  Kind : instance method of  ReportBuilder        Param  Type  Description      height  number  The height of the header, in report units (inches or mm).", 
            "title": ".columnFooter(height)"
        }, 
        {
            "location": "/reportbuilder-api/#columnheaderheight", 
            "text": "Add a column header to the report.  Kind : instance method of  ReportBuilder        Param  Type  Description      height  number  The height of the header, in report units (inches or mm).", 
            "title": ".columnHeader(height)"
        }, 
        {
            "location": "/reportbuilder-api/#datadatasourceid", 
            "text": "Begins a data section in the report using the specified data source ID.\nWhen called multiple times, adds additional data sections below the first,\neach allowing nested grouping within its own data source via subsequent\ncalls to groupBy, header, footer, detail, etc.\nThis should be one of the first methods you call when using the\nreport builder API to define a report.  Kind : instance method of  ReportBuilder        Param  Type  Description      dataSourceId  string  The ID of the data source; must match a defined data source ID   when the report runs", 
            "title": ".data(dataSourceId)"
        }, 
        {
            "location": "/reportbuilder-api/#detail", 
            "text": "Move to the detail of the current data section  Kind : instance method of  ReportBuilder", 
            "title": ".detail()"
        }, 
        {
            "location": "/reportbuilder-api/#detailheight", 
            "text": "Set the height of the report's detail section, in report units (inches or mm).  Kind : instance method of  ReportBuilder", 
            "title": ".detailHeight()"
        }, 
        {
            "location": "/reportbuilder-api/#done", 
            "text": "Return the report definition in object form.  Call this at the end of a chain of calls that define the report.\nThe object returned by this method is the report definition that you can pass to ditto.render()\nor ditto.export().  Kind : instance method of  ReportBuilder  Example     // Define a simple report with one text element\nvar reportDef = ditto.createReport()\n  .data('mydata')\n  .text('Data value is [myfield]')\n  .done();", 
            "title": ".done()"
        }, 
        {
            "location": "/reportbuilder-api/#element", 
            "text": "Add an element by its type ID - for custom elements  Kind : instance method of  ReportBuilder", 
            "title": ".element()"
        }, 
        {
            "location": "/reportbuilder-api/#filterbyfield-comparison-compareto", 
            "text": "Add a filter to restrict which records are shown in the report.\nTo filter by a user input, use  '[?InputName]'  syntax\nin the compareTo argument.  Kind : instance method of  ReportBuilder        Param  Type  Description      field  string  Name of the data field to filter    comparison  string  One of: is, isnot, contains, doesnotcontain, gt, lt, gte, lte    compareTo  string  Expression against which the data field will be compared", 
            "title": ".filterBy(field, comparison, compareTo)"
        }, 
        {
            "location": "/reportbuilder-api/#footerheight", 
            "text": "Add a footer to the current level.  By default, the level is the report itself;\nif  groupBy  has been called, then the footer will be added to the most recent\ngrouping level.  Kind : instance method of  ReportBuilder        Param  Type  Description      height  number  The height of the footer, in report units (inches or mm).", 
            "title": ".footer(height)"
        }, 
        {
            "location": "/reportbuilder-api/#groupbygroupby-91sortby93-91sortdir93", 
            "text": "Add a new sub-grouping.  If groupBy has already been called, this adds a sub-grouping beneath that grouping.\nRecords will be grouped by the values in the groupBy data field and the groups will be arranged relative to each\nother based on the sortBy data field, if specified.  Groups do not have headers or footers by default; use addHeader  and  addFooter  to add them.  Kind : instance method of  ReportBuilder        Param  Type  Description      groupBy  string  The data field containing the values defining the groups    [sortBy]  string  The data field by which groups should be sorted relative to each other (default: same as groupBy)    [sortDir]  string  One of: 'asc', 'desc' (ascending = A-Z, 0-9) (default: 'asc')", 
            "title": ".groupBy(groupBy, [sortBy], [sortDir])"
        }, 
        {
            "location": "/reportbuilder-api/#headerheight", 
            "text": "Add a header to the current level.  By default, the level is the report itself;\nif  groupBy  has been called, then the header will be added to the most recent\ngrouping level.  Kind : instance method of  ReportBuilder        Param  Type  Description      height  number  The height of the header, in report units (inches or mm).", 
            "title": ".header(height)"
        }, 
        {
            "location": "/reportbuilder-api/#hidedetail", 
            "text": "Make the report's detail section invisible.  Kind : instance method of  ReportBuilder", 
            "title": ".hideDetail()"
        }, 
        {
            "location": "/reportbuilder-api/#imageurl-left-top-width-height-opts", 
            "text": "Add an image element at the specified location.  Kind : instance method of  ReportBuilder        Param  Type  Description      url  string  The url of the image, either relative or absolute    left  number  The distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin    top  number  The distance from the top edge of the section to the top edge of the element, in report units    width  number  The width of the element in report units    height  number  The height of the element in report units    opts  object  An object containing additional properties to apply to the element", 
            "title": ".image(url, left, top, width, height, opts)"
        }, 
        {
            "location": "/reportbuilder-api/#inputname-type-91defaultvalue93", 
            "text": "Add a user input to the report.  Inputs appear in the report viewer toolbar\nand allow you to filter the report by user-provided values.  To filter by\nan input value, see  addFilter .  Kind : instance method of  ReportBuilder        Param  Type  Description      name  string  User-visible name of the input field    type  string  One of \"text\", \"number\", \"date\"    [defaultValue]  string  The default value for the input", 
            "title": ".input(name, type, [defaultValue])"
        }, 
        {
            "location": "/reportbuilder-api/#marginstop-right-bottom-left", 
            "text": "Set the page margins for the report.  Margins will use the units defined\nfor the report in setPage, or inches if setPage is not called.\nIf only one argument is supplied, it will be used for all four margins.  Kind : instance method of  ReportBuilder        Param  Type  Description      top  number  The top margin height, in report units (inches or mm).    right  number  The right margin width, in report units.    bottom  number  The bottom margin height, in report units.    left  number  The left margin width, in report units.", 
            "title": ".margins(top, right, bottom, left)"
        }, 
        {
            "location": "/reportbuilder-api/#namename", 
            "text": "Set the report's name (used to generate filenames for download)  Kind : instance method of  ReportBuilder        Param  Type  Description      name  string  The new name for the report", 
            "title": ".name(name)"
        }, 
        {
            "location": "/reportbuilder-api/#pagewidth-height-units", 
            "text": "Set page dimensions for the report.  Kind : instance method of  ReportBuilder        Param  Type  Description      width  number  The width of the page, in report units (inches or mm).    height  number  The height of the page, in report units (inches or mm).    units  string  The report units ('in' or 'mm'), defaults to inches     Example     // Set the report to 8.5 x 11 inches (US letter size)\nditto.createReport()\n  .setPage(8.5, 11,  inches )", 
            "title": ".page(width, height, units)"
        }, 
        {
            "location": "/reportbuilder-api/#pagefooterheight", 
            "text": "Add a page footer to the report.  Kind : instance method of  ReportBuilder        Param  Type  Description      height  number  The height of the footer, in report units (inches or mm).", 
            "title": ".pageFooter(height)"
        }, 
        {
            "location": "/reportbuilder-api/#pageheaderheight", 
            "text": "Add a page header to the report.  Kind : instance method of  ReportBuilder        Param  Type  Description      height  number  The height of the header, in report units (inches or mm).", 
            "title": ".pageHeader(height)"
        }, 
        {
            "location": "/reportbuilder-api/#seriesvaluefield-91labelfield93-91colorfield93", 
            "text": "Add a data series to the previously added chart element (see  chart )  Kind : instance method of  ReportBuilder        Param  Type  Description      valueField  string  The data field containing the y-values for line and bar charts, and slice sizes for pie charts    [labelField]  string  The field containing slice labels for pie charts    [colorField]  string  The field containing slice labels for pie charts", 
            "title": ".series(valueField, [labelField], [colorField])"
        }, 
        {
            "location": "/reportbuilder-api/#showdetail", 
            "text": "Make the report's detail section visible.  Kind : instance method of  ReportBuilder", 
            "title": ".showDetail()"
        }, 
        {
            "location": "/reportbuilder-api/#sortdetailbysortby-91sortdir93", 
            "text": "Order records in the report detail section by the given data field, in the given direction.  Kind : instance method of  ReportBuilder        Param  Type  Description      sortBy  string  The name of the data field by which to sort    [sortDir]  string  One of: 'asc', 'desc' (ascending = A-Z, 0-9) (default: 'asc')", 
            "title": ".sortDetailBy(sortBy, [sortDir])"
        }, 
        {
            "location": "/reportbuilder-api/#tableleft-top-width-height-opts", 
            "text": "Add a table element at the specified location.  Kind : instance method of  ReportBuilder        Param  Type  Description      left  number  The distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin    top  number  The distance from the top edge of the section to the top edge of the element, in report units    width  number  The width of the element in report units    height  number  The height of the element in report units    opts  object  An object containing additional properties to apply to the element     Example     .table(0, 1.25, 4.75, 2.5, { data: 'changeItems', hasFooter: true, \n    groupBy: 'category', fontSize: 9, hideRowWhenExpr: '!description' \n})\n.column('50%', '\u2007\u2007\u2007[description]', '', '', { \n    align: 'left', group0Header: '[category]' })\n.column('25%', '[currentPeriod]', 'This Period', '[SUM(currentPeriod)]', { \n    align: 'right',\n    detailStyle: {\n        pattern: '#,##0.00'\n    },\n    group0Header: '[SUM(currentPeriod)]',\n    group0HeaderStyle: {\n        pattern: '#,##0.00'\n    }\n})\n.column('25%', '[ytd]', 'Year-to-Date', '[SUM(ytd)]', { \n    align: 'right',\n    detailStyle: {\n        pattern: '#,##0.00'\n    },\n    group0Header: '[SUM(ytd)]',\n    group0HeaderStyle: {\n        pattern: '#,##0.00'\n    }\n})", 
            "title": ".table(left, top, width, height, opts)"
        }, 
        {
            "location": "/reportbuilder-api/#texttext-left-top-width-height-opts", 
            "text": "Add a text element at the specified location.  Kind : instance method of  ReportBuilder        Param  Type  Description      text  string  The content of the text element.    left  number  The distance from the left edge of the section to the left edge of the element, in report units (inches or mm), not including the page margin    top  number  The distance from the top edge of the section to the top edge of the element, in report units    width  number  The width of the element in report units    height  number  The height of the element in report units    opts  object  An object containing additional properties to apply to the element", 
            "title": ".text(text, left, top, width, height, opts)"
        }, 
        {
            "location": "/reportbuilder-api/#tostring", 
            "text": "Like  done() , but returns the report definition in string format.  Kind : instance method of  ReportBuilder", 
            "title": ".toString()"
        }, 
        {
            "location": "/reportdef/", 
            "text": "jsreports JSON Report Schema\n\n\n\n\nReport\n\n\nDescribes the JSON report definition format used by jsreports.  The root element in the JSON structure is a \nReport\n, containing sections that in turn contain elements.\n\n{\n  \"title\": \"Project Detail by Client and Task\",\n  \"id\": \"jsreports-demo-grouping\",\n  \"default_format\": \"html\",\n  \"version\": \"1.2.20\",\n  \"page\": \nPage\n,\n  \"filters\": [ \nFilter\n ],\n  \"inputs\": [ \nInput\n ],\n  \"header\": \nSection\n,\n  \"body\": \nBodySection\n,\n  \"footer\": \nSection\n,\n  \"page_header\": \nSection\n,\n  \"page_footer\": \nSection\n,\n  \"type\": \"hierarchical\"\n}\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npage\nobject\n\n\nDefines the print page setup for the report\n\n\n\n\n\n\nheader\nobject\n\n\nA \nSection\n representing the report header, which is shown once at the top of the report\n\n\n\n\n\n\nbody\nobject\n\n\nA \nBodySection\n representing the report body\n\n\n\n\n\n\nfooter\nobject\n\n\nA \nSection\n representing the report footer, which is shown once at the bottom of the report\n\n\n\n\n\n\nid\nstring\n\n\nReport ID \nOPTIONAL\n\n\n\n\n\n\nversion\nstring\n\n\nVersion of jsreports used to create this report (when created by the designer or report builder API) \nOPTIONAL\n\n\n\n\n\n\ndefault_format\nstring\n\n\nNot currently used\nMust be: \"html\"\n \nOPTIONAL\n\n\n\n\n\n\ntitle\nstring\n\n\nTitle of report to be shown to user, for use by plugins listing available reports \nOPTIONAL\n\n\n\n\n\n\nfilters\narray\n\n\nFilters to apply to the report's top-level data source; only matching records will appear in the report \nOPTIONAL\n\n\n\n\n\n\ninputs\narray\n\n\nUser-facing inputs to display in the report toolbar, for supplying parameters to the report at runtime \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nPage\n\n\nDefines the print page setup for the report\n\n{\n  \"units\": \"inches\",\n  \"paper_size\": {\n    \"name\": \"Letter\",\n    \"inches\": [\n      \"8.5\",\n      \"11\"\n    ],\n    \"mm\": [\n      \"216\",\n      \"279\"\n    ],\n    \"id\": \"letter\"\n  },\n  \"margins\": {\n    \"top\": 0.5,\n    \"left\": 0.5,\n    \"right\": 0.5,\n    \"bottom\": 0.5\n  }\n}\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nunits\nstring\n\n\nThe units to use for page dimensions and positioning elements\nOne of: \"mm\", \"inches\"\n\n\n\n\n\n\npaper_size\nobject\n\n\nDefines the size of the paper when outputting to paged media (e.g. PDF).  Either \"inches\" or \"mm\" property is required, matching the value of the page.units property\n\n\n\n\n\n\nmargins\nobject\n\n\nThe page margins\n\n\n\n\n\n\n\n\n\n\nInput\n\n\n{\n  \"name\": \"Client name\",\n  \"type\": \"text\",\n  \"default_value\": \"\"\n}\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\nstring\n\n\nThe internal name by which the report will refer to this input, for example in defining a filter against it\n\n\n\n\n\n\ntype\nstring\n\n\nThe data type of the input; determines the type of input field shown\nOne of: \"text\", \"number\", \"date\"\n\n\n\n\n\n\ndefault_value\nstring\n\n\nThe default value to use when the user has not entered a value \nOPTIONAL\n\n\n\n\n\n\noptionSource\narray,string\n\n\nFor \"text\" type inputs only.  An array of string values to show as drop-down options for the input field, or the string ID of a separately-defined data source.  When referencing a data source, use the optionSourceField to indicate which field in the data source contains the drop-down values. \nOPTIONAL\n\n\n\n\n\n\noptionSourceField\nstring\n\n\nFor \"text\" type inputs only.  Use in conjunction with the optionSource property above.  Indicates which field in the specified data source contains the string values to use as drop-down selection options for the input field. \nOPTIONAL\n\n\n\n\n\n\nlimitToList\nboolean\n\n\nWhen optionSource is specified and limitToList is true, prevents the user from entering a value not in the list of options for the input\nDefault: false\n \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nTextElement\n\n\nA text label, either static or dynamically calculated\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\nstring\n\n\nMust be: \"text\"\n\n\n\n\n\n\ntop\nnumber\n\n\nThe distance from the top of the section to the top edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nleft\nnumber\n\n\nThe distance from the left margin to the left edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nwidth\nnumber\n\n\nThe width of the element, in report units (inches or mm)\n\n\n\n\n\n\nheight\nnumber\n\n\nThe height of the element, in report units (inches or mm)\n\n\n\n\n\n\nid\nstring\n\n\nThe element ID for internal use; will be auto-generated if not present \nOPTIONAL\n\n\n\n\n\n\ntext\nstring\n\n\nThe text to display.  Can contain expressions in square brackets, like:\n The field value is [fieldName]\nThe total is [SUM(fieldName)]\nMultiplied by 3 is [=fieldName * 3]\nPercent of total is [=fieldname / SUM('fieldName') * 100]\n\n\n\n\n\n\npattern\nstring\n\n\nA format string used to format a data value or calculation result; uses Excel-style patterns e.g. MM/DD/YY or $#,##0.00.  Only applied when the entire text property is a bracket expression resulting in a number or date value \nOPTIONAL\n\n\n\n\n\n\nfontsize\nnumber\n\n\nFont size in points \nOPTIONAL\n\n\n\n\n\n\nbold\nboolean\n\n\nWhether to render the text in bold\nDefault: false\n \nOPTIONAL\n\n\n\n\n\n\nitalic\nboolean\n\n\nWhether to render the text in italics\nDefault: false\n \nOPTIONAL\n\n\n\n\n\n\nunderline\nboolean\n\n\nWhether to render the text underlined\nDefault: false\n \nOPTIONAL\n\n\n\n\n\n\nwrap\nboolean\n\n\nWhether to wrap text if it extends beyond the width of the element\nDefault: true\n \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nBoxElement\n\n\nA rectangle with border and fill colors and optional corner rounding\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\nstring\n\n\nMust be: \"box\"\n\n\n\n\n\n\ntop\nnumber\n\n\nThe distance from the top of the section to the top edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nleft\nnumber\n\n\nThe distance from the left margin to the left edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nwidth\nnumber\n\n\nThe width of the element, in report units (inches or mm)\n\n\n\n\n\n\nheight\nnumber\n\n\nThe height of the element, in report units (inches or mm)\n\n\n\n\n\n\nid\nstring\n\n\nThe element ID for internal use; will be auto-generated if not present \nOPTIONAL\n\n\n\n\n\n\nbackground_color\nstring\n\n\nThe CSS color code for the fill (background) color, e.g. \"black\" or \"#e0da38\"\n\n\n\n\n\n\nborder_color\nstring\n\n\nThe CSS color code for the stroke (border) color, e.g. \"black\" or \"#e0da38\"\n\n\n\n\n\n\ncorner_radius\nnumber\n\n\nThe amount of corner rounding\n\n\n\n\n\n\n\n\n\n\nChartElement\n\n\nA chart, showing one or more series of data from the current grouped rows or another data source.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\nstring\n\n\nWhich type of chart to draw\nOne of: \"chart-pie\", \"chart-line\", \"chart-bar\"\n\n\n\n\n\n\ntop\nnumber\n\n\nThe distance from the top of the section to the top edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nleft\nnumber\n\n\nThe distance from the left margin to the left edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nwidth\nnumber\n\n\nThe width of the element, in report units (inches or mm)\n\n\n\n\n\n\nheight\nnumber\n\n\nThe height of the element, in report units (inches or mm)\n\n\n\n\n\n\nid\nstring\n\n\nThe element ID for internal use; will be auto-generated if not present \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nImageElement\n\n\nAn image\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\nstring\n\n\nMust be: \"image\"\n\n\n\n\n\n\ntop\nnumber\n\n\nThe distance from the top of the section to the top edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nleft\nnumber\n\n\nThe distance from the left margin to the left edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nwidth\nnumber\n\n\nThe width of the element, in report units (inches or mm)\n\n\n\n\n\n\nheight\nnumber\n\n\nThe height of the element, in report units (inches or mm)\n\n\n\n\n\n\nid\nstring\n\n\nThe element ID for internal use; will be auto-generated if not present \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nBarcodeElement\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\nstring\n\n\nMust be: \"barcode\"\n\n\n\n\n\n\ntop\nnumber\n\n\nThe distance from the top of the section to the top edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nleft\nnumber\n\n\nThe distance from the left margin to the left edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nwidth\nnumber\n\n\nThe width of the element, in report units (inches or mm)\n\n\n\n\n\n\nheight\nnumber\n\n\nThe height of the element, in report units (inches or mm)\n\n\n\n\n\n\nid\nstring\n\n\nThe element ID for internal use; will be auto-generated if not present \nOPTIONAL\n\n\n\n\n\n\nvalue\nstring\n\n\nThe value to encode in the barcode.  Like the textElement text property, can accept calculations or data fields\n\n\n\n\n\n\n\n\n\n\nBreakElement\n\n\nA page break.  Placed at a vertical position within a report section, this element will trigger a page break in PDF mode at that position each time the section is rendered.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\nstring\n\n\nMust be: \"break\"\n\n\n\n\n\n\ntop\nnumber\n\n\nThe distance from the top of the section to the top edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nid\nstring\n\n\nThe element ID for internal use; will be auto-generated if not present \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nSubreportElement\n\n\nRender another report within the current report.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\nstring\n\n\nMust be: \"subreport\"\n\n\n\n\n\n\ntop\nnumber\n\n\nThe distance from the top of the section to the top edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nleft\nnumber\n\n\nThe distance from the left margin to the left edge of the element, in report units (inches or mm)\n\n\n\n\n\n\nwidth\nnumber\n\n\nThe width of the element, in report units (inches or mm)\n\n\n\n\n\n\nheight\nnumber\n\n\nThe height of the element, in report units (inches or mm)\n\n\n\n\n\n\nid\nstring\n\n\nThe element ID for internal use; will be auto-generated if not present \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nSection\n\n\nA horizontal section of the report containing elements, that may be bound to data in the data source and may be repeated one or more times for each underlying data row.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\nnumber\n\n\nThe height of the section, in report units\n\n\n\n\n\n\nelements\narray\n\n\nAn array of Elements in arbitrary order to display within this report section\n\n\n\n\n\n\nvisible\nboolean\n\n\nWhether the section should be displayed when the report is rendered\nDefault: true\n \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nBodySection\n\n\nA section representing the main report body, containing elements and also allowing pivot and sub-level (grouping) configuration.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\nnumber\n\n\nThe height of the section, in report units\n\n\n\n\n\n\nelements\narray\n\n\nAn array of Elements in arbitrary order to display within this report section\n\n\n\n\n\n\nvisible\nboolean\n\n\nWhether the section should be displayed when the report is rendered\nDefault: true\n \nOPTIONAL\n\n\n\n\n\n\npivot_enabled\nboolean\n\n\nWhether to pivot the main data source, generating columns from unique values in the rows\nDefault: false\n\n\n\n\n\n\npivot_expression\nstring\n\n\nThe expression to evaluate to generate columns.  One column will be generated for each unique result of this expression across all rows.\n\n\n\n\n\n\npivot_column_sort_by\nstring\n\n\nThe field name in the underlying data source to sort by when ordering generated columns\n\n\n\n\n\n\norder_detail_by\nstring\n\n\nThe field name to sort by when ordering the detail sections\n\n\n\n\n\n\npivot_column_left\nnumber\n\n\nThe left edge of the pivot column in the report template, measured from the left margin, in report units.  The pivot column defines the area in the report template that will be cloned to generate the pivot columns.  Any elements defined to lie within the pivot column region will be cloned; other elements will not be cloned.\n\n\n\n\n\n\npivot_column_right\nnumber\n\n\nThe right edge of the pivot column in the report template, measured from the left margin, in report units.\n\n\n\n\n\n\nsublevels\narray\n\n\nAn array of \nLevel\ns, outermost-first, that create a hierarchical (nested) report structure \nOPTIONAL\n\n\n\n\n\n\n\n\n\n\nLevel\n\n\nA nesting sub-level in the report, used for groupings or drill-down into different data sources.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata_source\nstring\n\n\nThe ID of the data source to use to fill this sub-level, or \"__parentgroup\" to re-group the rows from a parent grouping\n\n\n\n\n\n\nheader\nobject\n\n\nThe \nSection\n defining the header to render for each instance of this level\n\n\n\n\n\n\nfooter\nobject\n\n\nThe \nSection\n defining the footer to render for each instance of this level\n\n\n\n\n\n\ngroup_by\nstring\n\n\nThe field name in the data source by which to group this level\n\n\n\n\n\n\nsort_by\nstring\n\n\nThe field name by which to sort the groups in this level.  If not present, defaults to the group_by field (if any)\n\n\n\n\n\n\nsort_dir\nstring\n\n\nWhich direction the groups should be ordered; defaults to \"asc\" (A-\nZ)\nOne of: \"asc\", \"desc\"", 
            "title": "JSON Report Format"
        }, 
        {
            "location": "/reportdef/#jsreports-json-report-schema", 
            "text": "", 
            "title": "jsreports JSON Report Schema"
        }, 
        {
            "location": "/reportdef/#report", 
            "text": "Describes the JSON report definition format used by jsreports.  The root element in the JSON structure is a  Report , containing sections that in turn contain elements. {\n  \"title\": \"Project Detail by Client and Task\",\n  \"id\": \"jsreports-demo-grouping\",\n  \"default_format\": \"html\",\n  \"version\": \"1.2.20\",\n  \"page\":  Page ,\n  \"filters\": [  Filter  ],\n  \"inputs\": [  Input  ],\n  \"header\":  Section ,\n  \"body\":  BodySection ,\n  \"footer\":  Section ,\n  \"page_header\":  Section ,\n  \"page_footer\":  Section ,\n  \"type\": \"hierarchical\"\n}     Property  Description      page object  Defines the print page setup for the report    header object  A  Section  representing the report header, which is shown once at the top of the report    body object  A  BodySection  representing the report body    footer object  A  Section  representing the report footer, which is shown once at the bottom of the report    id string  Report ID  OPTIONAL    version string  Version of jsreports used to create this report (when created by the designer or report builder API)  OPTIONAL    default_format string  Not currently used Must be: \"html\"   OPTIONAL    title string  Title of report to be shown to user, for use by plugins listing available reports  OPTIONAL    filters array  Filters to apply to the report's top-level data source; only matching records will appear in the report  OPTIONAL    inputs array  User-facing inputs to display in the report toolbar, for supplying parameters to the report at runtime  OPTIONAL", 
            "title": "Report"
        }, 
        {
            "location": "/reportdef/#page", 
            "text": "Defines the print page setup for the report {\n  \"units\": \"inches\",\n  \"paper_size\": {\n    \"name\": \"Letter\",\n    \"inches\": [\n      \"8.5\",\n      \"11\"\n    ],\n    \"mm\": [\n      \"216\",\n      \"279\"\n    ],\n    \"id\": \"letter\"\n  },\n  \"margins\": {\n    \"top\": 0.5,\n    \"left\": 0.5,\n    \"right\": 0.5,\n    \"bottom\": 0.5\n  }\n}     Property  Description      units string  The units to use for page dimensions and positioning elements One of: \"mm\", \"inches\"    paper_size object  Defines the size of the paper when outputting to paged media (e.g. PDF).  Either \"inches\" or \"mm\" property is required, matching the value of the page.units property    margins object  The page margins", 
            "title": "Page"
        }, 
        {
            "location": "/reportdef/#input", 
            "text": "{\n  \"name\": \"Client name\",\n  \"type\": \"text\",\n  \"default_value\": \"\"\n}     Property  Description      name string  The internal name by which the report will refer to this input, for example in defining a filter against it    type string  The data type of the input; determines the type of input field shown One of: \"text\", \"number\", \"date\"    default_value string  The default value to use when the user has not entered a value  OPTIONAL    optionSource array,string  For \"text\" type inputs only.  An array of string values to show as drop-down options for the input field, or the string ID of a separately-defined data source.  When referencing a data source, use the optionSourceField to indicate which field in the data source contains the drop-down values.  OPTIONAL    optionSourceField string  For \"text\" type inputs only.  Use in conjunction with the optionSource property above.  Indicates which field in the specified data source contains the string values to use as drop-down selection options for the input field.  OPTIONAL    limitToList boolean  When optionSource is specified and limitToList is true, prevents the user from entering a value not in the list of options for the input Default: false   OPTIONAL", 
            "title": "Input"
        }, 
        {
            "location": "/reportdef/#textelement", 
            "text": "A text label, either static or dynamically calculated     Property  Description      type string  Must be: \"text\"    top number  The distance from the top of the section to the top edge of the element, in report units (inches or mm)    left number  The distance from the left margin to the left edge of the element, in report units (inches or mm)    width number  The width of the element, in report units (inches or mm)    height number  The height of the element, in report units (inches or mm)    id string  The element ID for internal use; will be auto-generated if not present  OPTIONAL    text string  The text to display.  Can contain expressions in square brackets, like:  The field value is [fieldName] The total is [SUM(fieldName)] Multiplied by 3 is [=fieldName * 3] Percent of total is [=fieldname / SUM('fieldName') * 100]    pattern string  A format string used to format a data value or calculation result; uses Excel-style patterns e.g. MM/DD/YY or $#,##0.00.  Only applied when the entire text property is a bracket expression resulting in a number or date value  OPTIONAL    fontsize number  Font size in points  OPTIONAL    bold boolean  Whether to render the text in bold Default: false   OPTIONAL    italic boolean  Whether to render the text in italics Default: false   OPTIONAL    underline boolean  Whether to render the text underlined Default: false   OPTIONAL    wrap boolean  Whether to wrap text if it extends beyond the width of the element Default: true   OPTIONAL", 
            "title": "TextElement"
        }, 
        {
            "location": "/reportdef/#boxelement", 
            "text": "A rectangle with border and fill colors and optional corner rounding     Property  Description      type string  Must be: \"box\"    top number  The distance from the top of the section to the top edge of the element, in report units (inches or mm)    left number  The distance from the left margin to the left edge of the element, in report units (inches or mm)    width number  The width of the element, in report units (inches or mm)    height number  The height of the element, in report units (inches or mm)    id string  The element ID for internal use; will be auto-generated if not present  OPTIONAL    background_color string  The CSS color code for the fill (background) color, e.g. \"black\" or \"#e0da38\"    border_color string  The CSS color code for the stroke (border) color, e.g. \"black\" or \"#e0da38\"    corner_radius number  The amount of corner rounding", 
            "title": "BoxElement"
        }, 
        {
            "location": "/reportdef/#chartelement", 
            "text": "A chart, showing one or more series of data from the current grouped rows or another data source.     Property  Description      type string  Which type of chart to draw One of: \"chart-pie\", \"chart-line\", \"chart-bar\"    top number  The distance from the top of the section to the top edge of the element, in report units (inches or mm)    left number  The distance from the left margin to the left edge of the element, in report units (inches or mm)    width number  The width of the element, in report units (inches or mm)    height number  The height of the element, in report units (inches or mm)    id string  The element ID for internal use; will be auto-generated if not present  OPTIONAL", 
            "title": "ChartElement"
        }, 
        {
            "location": "/reportdef/#imageelement", 
            "text": "An image     Property  Description      type string  Must be: \"image\"    top number  The distance from the top of the section to the top edge of the element, in report units (inches or mm)    left number  The distance from the left margin to the left edge of the element, in report units (inches or mm)    width number  The width of the element, in report units (inches or mm)    height number  The height of the element, in report units (inches or mm)    id string  The element ID for internal use; will be auto-generated if not present  OPTIONAL", 
            "title": "ImageElement"
        }, 
        {
            "location": "/reportdef/#barcodeelement", 
            "text": "Property  Description      type string  Must be: \"barcode\"    top number  The distance from the top of the section to the top edge of the element, in report units (inches or mm)    left number  The distance from the left margin to the left edge of the element, in report units (inches or mm)    width number  The width of the element, in report units (inches or mm)    height number  The height of the element, in report units (inches or mm)    id string  The element ID for internal use; will be auto-generated if not present  OPTIONAL    value string  The value to encode in the barcode.  Like the textElement text property, can accept calculations or data fields", 
            "title": "BarcodeElement"
        }, 
        {
            "location": "/reportdef/#breakelement", 
            "text": "A page break.  Placed at a vertical position within a report section, this element will trigger a page break in PDF mode at that position each time the section is rendered.     Property  Description      type string  Must be: \"break\"    top number  The distance from the top of the section to the top edge of the element, in report units (inches or mm)    id string  The element ID for internal use; will be auto-generated if not present  OPTIONAL", 
            "title": "BreakElement"
        }, 
        {
            "location": "/reportdef/#subreportelement", 
            "text": "Render another report within the current report.     Property  Description      type string  Must be: \"subreport\"    top number  The distance from the top of the section to the top edge of the element, in report units (inches or mm)    left number  The distance from the left margin to the left edge of the element, in report units (inches or mm)    width number  The width of the element, in report units (inches or mm)    height number  The height of the element, in report units (inches or mm)    id string  The element ID for internal use; will be auto-generated if not present  OPTIONAL", 
            "title": "SubreportElement"
        }, 
        {
            "location": "/reportdef/#section", 
            "text": "A horizontal section of the report containing elements, that may be bound to data in the data source and may be repeated one or more times for each underlying data row.     Property  Description      height number  The height of the section, in report units    elements array  An array of Elements in arbitrary order to display within this report section    visible boolean  Whether the section should be displayed when the report is rendered Default: true   OPTIONAL", 
            "title": "Section"
        }, 
        {
            "location": "/reportdef/#bodysection", 
            "text": "A section representing the main report body, containing elements and also allowing pivot and sub-level (grouping) configuration.     Property  Description      height number  The height of the section, in report units    elements array  An array of Elements in arbitrary order to display within this report section    visible boolean  Whether the section should be displayed when the report is rendered Default: true   OPTIONAL    pivot_enabled boolean  Whether to pivot the main data source, generating columns from unique values in the rows Default: false    pivot_expression string  The expression to evaluate to generate columns.  One column will be generated for each unique result of this expression across all rows.    pivot_column_sort_by string  The field name in the underlying data source to sort by when ordering generated columns    order_detail_by string  The field name to sort by when ordering the detail sections    pivot_column_left number  The left edge of the pivot column in the report template, measured from the left margin, in report units.  The pivot column defines the area in the report template that will be cloned to generate the pivot columns.  Any elements defined to lie within the pivot column region will be cloned; other elements will not be cloned.    pivot_column_right number  The right edge of the pivot column in the report template, measured from the left margin, in report units.    sublevels array  An array of  Level s, outermost-first, that create a hierarchical (nested) report structure  OPTIONAL", 
            "title": "BodySection"
        }, 
        {
            "location": "/reportdef/#level", 
            "text": "A nesting sub-level in the report, used for groupings or drill-down into different data sources.     Property  Description      data_source string  The ID of the data source to use to fill this sub-level, or \"__parentgroup\" to re-group the rows from a parent grouping    header object  The  Section  defining the header to render for each instance of this level    footer object  The  Section  defining the footer to render for each instance of this level    group_by string  The field name in the data source by which to group this level    sort_by string  The field name by which to sort the groups in this level.  If not present, defaults to the group_by field (if any)    sort_dir string  Which direction the groups should be ordered; defaults to \"asc\" (A- Z) One of: \"asc\", \"desc\"", 
            "title": "Level"
        }, 
        {
            "location": "/changelog/", 
            "text": "Ditto Change Log\n\n\n1.4.87 (Mar 26 2017)\n\n\n\n\nDesigner visual updates\n\n\nMove new element toolbar in designer to left margin\n\n\nImprovements to preview plugin\n\n\nAdd options to control sections breaking across pages\n\n\nWarn when trying to save group without group-by field in designer\n\n\nAdd ability to define data sources dependent on other data sources using \nrequires: ['other-data-source-id']\n in data source config.  The \npostProcess\n handler will receive the listed data sources as arguments in the given order.\n\n\nFix issue with \nwrap\n checkbox on text elements in designer not initializing correctly\n\n\n\n\n1.4.80 (Feb 6 2017)\n\n\n\n\nExpand selection of fonts available by default\n\n\nEnable repeating group headers on subsequent print pages via \nrepeatEachPage: true\n on section\n\n\nAdd postProcess data source option to transform data source after loading\n\n\nImprove handling of group sorting when groups are sorted by a non-grouped field\n\n\nFix handling of 404 when image source not found while exporting to Excel\n\n\nFix issue with pivot element rendering\n\n\n\n\n1.4.78 (Jan 17 2017)\n\n\n\n\nAdd designer support for conditional rules on table cells\n\n\nAdd ability to intercept data source selection in designer via \n  onDataSourceSelected and getDataSourceOptions config properties\n\n\nFix issue with pivot feature checkbox\n\n\n\n\n1.4.77 (Jan 10 2017)\n\n\n\n\nFix timing issue with report_rendered event and PDF export\n\n\nFix font name resolution issue in PDF export\n\n\nAdd support for conditional rules on table cells\n\n\n\n\n1.4.76 (Jan 8 2017)\n\n\n\n\nFix issue with ExtJS store loading\n\n\nAdd messaging when data source fails to load within configurable timeout period\n\n\n\n\n1.4.75 (Jan 4 2017)\n\n\n\n\nAdd support for zIndex property on elements for PDF rendering\n\n\nAdd support for table cell padding in PDF\n\n\nAdd support for CSS background image in table cells in PDF\n\n\nAdd support for multiple stacked detail sections per data row\n\n\nImprove support for splitting text elements across pages in PDF\n\n\nAdd support for functions as data sources\n\n\nAdd support for nested JSON data structures via dot syntax, e.g. row.subfield.subfield2\n\n\nEnable calculated position properties for elements\n\n\nImprove Markdown bullet list rendering in PDF\n\n\nAdd support for specifying report-level element default properties by element type\n\n\nAdd support for stacked data regions from different data sources in one report\n\n\nAdd autocompletion for dot syntax subfields in conditional rules picker\n\n\nAdd Line element\n\n\n\n\n1.4.62 (Nov 6 2016)\n\n\n\n\nAdd conditional property rules support \n designer UI\n\n\nFix issue with table page breaks in PDF\n\n\n\n\n1.4.60 (Oct 15 2016)\n\n\n\n\nFix table element data source issue outside of grouped sections\n\n\nImprove hints about expected config for designer plugins\n\n\nAdd support for multiple detail sections per report\n\n\n\n\n1.4.57 (Sep 20 2016)\n\n\n\n\nAdd Table element support in designer\n\n\n\n\n1.4.47 (Aug 17 2016)\n\n\n\n\nAdd Checkbox element\n\n\nEnable custom functions\n\n\nEnable all element types in page header and footer\n\n\nFix issue with corner rounding in PDF mode\n\n\nImprove server handling of PhantomJS errors on Windows\n\n\nImprove import of Jasper Reports stylesheets \n grouped elements, frame borders\n\n\nImprove text measurement in PDF\n\n\nSupport mixed content via Markdown\n\n\n\n\n1.4.40 (Jul 22 2016)\n\n\n\n\nEnable creation of custom composite elements, for easy drag and drop of pre-configured elements onto report\n\n\nScale fonts to page size in designer to better match final output\n\n\nEnable hard line break in text element by direct input of \\n (two characters) in text content\n\n\nEnable non-standard, non-embedded fonts in PDF by calling jsreports.registerFontReference(fontName)\n\n\nAllow hiding of left pane in designer with config option showSettingsPane: false\n\n\nFix chart rendering issue in Firefox\n\n\nPrevent report template from moving when selecting / de-selecting elements\n\n\n\n\n1.4.37 (Jul 12 2016)\n\n\n\n\nAdd: Improved and streamlined NodeJS support\n\n\nFix: Display issue with designer with pixel rounding causing panes to be vertically stacked\n\n\nAdd: Control section visibility via expressions\n\n\n\n\n1.4.32 (Jun 6 2016)\n\n\n\n\nFix: Issue with Unicode font embedding in PDFs in Adobe Reader (Windows)\n\n\nAdd: API to export current view from an existing HTML viewer\n\n\n\n\n1.4.19 (May 9 2016)\n\n\n\n\nAdd: Support for hard line breaks (\\n) in data\n\n\n\n\n1.4.16 (May 5 2016)\n\n\n\n\nFix: Issue with subreport inside subreport not saving properly\n\n\nFix: Issue with advanced property editor not saving properly for subreports\n\n\n\n\n1.4.15 (May 5 2016)\n\n\n\n\nAdd: Sencha ExtJS integration\n\n\nAdd: Internationalization support\n\n\nAdd: Unicode support for PDF\n\n\nFix: Issue with missing values in input optionSource\n\n\n\n\n1.4.14 (May 4 2016)\n\n\n\n\nAdd: Drop-down options for filter inputs (see optionSource at \nhttp://www.jsreports.com/docs/reportdef/#input\n)\n\n\nAdd: Proportional resize when holding Shift in designer\n\n\nFix: Null values displayed as \"null\"\n\n\n\n\n1.4.13 (May 3 2016)\n\n\n\n\nFix: Issue opening designer when joined data source specified without data available for underlying data source\n\n\nFix: Issue when using joined data sources together with their origin data sources with subreports\n\n\n\n\n1.4.11 (Apr 29 2016)\n\n\n\n\nFix: Issues with chart series when converting to Jasper JRXML\n\n\nFix: Issues with adding new elements and converting to JRXML\n\n\n\n\n1.4.10 (Apr 21 2016)\n\n\n\n\nFix: Issue with default report template being modified when opening designer with no report definition\n\n\nFix: Issue with consistency of mixed aggregate calculation syntax, e.g. [=SUM(Hours) * 5]\n\n\nFix: Issue with handling of new elements in blank report when converting to Jasper JRXML\n\n\n\n\n1.4.9 (Apr 20 2016)\n\n\n\n\nFix: Prevent overlapping subreports by stacking vertically where needed\n\n\nFix: Issues with subreport rendering across pages in PDF\n\n\nFix: Box border missing\n\n\nFix: Handling of box stacking order in PDF\n\n\n\n\n1.4.7 (Apr 15 2016)\n\n\n\n\nAdd: Support for new Jasper report creation\n\n\nChange: Improve PDF page breaking between table rows\n\n\nFix: Issue with pivot bucket type not saving properly\n\n\nFix: Issue with \"is not\" filter not working in some situations\n\n\n\n\n1.4.5 (Mar 24 2016)\n\n\n\n\nAdd: Custom date filter display formats\n\n\nFix: Issue with date-type filter input value parsing\n\n\n\n\n1.4.4 (Mar 21 2016)\n\n\n\n\nFix: CSS issue interfering with overriding base font for .jsr-report\n\n\n\n\n1.4.3 (Mar 18 2016)\n\n\n\n\nFix: Issue with joins not processing correctly when all data sources are local data\n\n\n\n\n1.4.2 (Mar 14 2016)\n\n\n\n\nAdd: Report mask \n spinner while report rendering (HTML mode)\n\n\nChange: Changes to report designer default theme (colors, section labels)\n\n\nFix: jsreports.export() support for outputHandler with format: 'xlsx'\n\n\n\n\n1.4.0 (Feb 1 2016)\n\n\n\n\nAdd: Table element\n\n\nAdd: FORMAT function\n\n\nAdd: Support for Excel-style format patterns\n\n\nAdd: Calculations involving aggregates, e.g. \"percent of total\" in detail row ([=amount / SUM('amount')])\n\n\nChange: Scale fonts in HTML rendering to correspond to page dimensions\n\n\nFix: Multi-line text alignment in PDF\n\n\nFix: Page footer rendering in PDF\n\n\n\n\n1.3.10 (Dec 31 2015)\n\n\n\n\nFix: Text element autocomplete dropdown in designer overlapped by report preview\n\n\nFix: Isolate default report CSS from external page CSS\n\n\nFix: Designer issue with text element autocomplete not opening when clearing initial value\n\n\nFix: By default preserve image aspect ratio in HTML, PDF output instead of stretching\n\n\nAdd: Make text element autocomplete dropdown appear on mouse click in field for easier data field insertion\n\n\n\n\n1.3.9 (Dec 28 2015)\n\n\n\n\nAdd: Support for reserved area for generated pivot columns, enabling better control over final layout\n\n\nAdd: Default print area for Excel export\n\n\nFix: Pivot behavior in PDF \n Excel\n\n\n\n\n1.3.5 (Dec 8 2015)\n\n\n\n\nAdd: Ability to import and export Jasper Reports report definitions (.jrxml)\n\n\n\n\n1.3.0 (Oct 9 2015)\n\n\n\n\nAdd: Page break element\n\n\nAdd: Subreport element\n\n\n\n\n1.2.41 (Sep 29 2015)\n\n\n\n\nAdd: Designer support for showing/hiding report header \n footer\n\n\nFix: Issue with datasets being loaded unnecessarily when rendering report\n\n\nFix: Improve reporting of problems during loading of data and schema\n\n\nFix: Issue with element widths and heights changing after drag operation in designer\n\n\n\n\n1.2.37 (Sep 8 2015)\n\n\n\n\nAdd: Designer left pane overlay mode for constrained screen space\n\n\nAdd: Download button for designer (showDownloadButton: true)\n\n\nAdd: ReportList plugin for designer\n\n\nFix: Issue with repeated exports to PDF resulting in extra blank page at beginning\n\n\nFix: Issue with direct export to XLSX with images\n\n\nFix: Issue with IE not supporting \"newwindow\" and \"print\" export targets (fall back to download)\n\n\n\n\n1.2.28 (Aug 12 2015)\n\n\n\n\nAdd: Methods to add buttons and other elements to designer toolbar\n\n\nFix: Issue with section heights in default report when no report definition supplied for designer\n\n\nFix: Prevent dragging of section boundaries past each other in designer\n\n\n\n\n1.2.26 (Aug 11 2015)\n\n\n\n\nAdd: Image URL expression evaluation, enabling images from data source\n\n\nAdd: Designer left pane overlay mode for narrow screen widths\n\n\nAdd: Ability to hide designer header bar\n\n\nAdd: End-user designer documentation (\nhttp://www.jsreports.com/docs/designer\n)\n\n\n\n\n1.2.25 (July 29 2015)\n\n\n\n\nAdd: ReportBuilder API for programmatic construction of reports\n\n\nAdd: Snap to grid in designer\n\n\nAdd: Select and drag multiple elements in designer with Cmd+click (or Ctrl+click)\n\n\nAdd: Delete multiple elements in designer with Delete key\n\n\nAdd: Copy/paste multiple elements in designer with Cmd+C, Cmd+V (or Ctrl+C, Ctrl+V)\n\n\nAdd: toolbarRendered event\n\n\n\n\n1.2.22 (May 23 2015)\n\n\n\n\nFix: Some text element properties not appearing in advanced property editor\n\n\n\n\n1.2.21 (May 19 2015)\n\n\n\n\nFix: Incorrect section heights in designer in certain scenarios\n\n\n\n\n1.2.19 (May 7 2015)\n\n\n\n\nFix: Barcodes not rendered to PDF properly in iOS Phonegap/Cordova\n\n\n\n\n1.2.16 (Apr 27 2015)\n\n\n\n\nAdd: Support for joined data sources (left, inner)\n\n\nAdd: Property editor for directly editing all element properties\n\n\n\n\n1.2.15 (Apr 22 2015)\n\n\n\n\nFix: Improve compression of barcodes when rendering to data URI (e.g. \"newwindow\")\n\n\n\n\n1.2.10 (Apr 1 2015)\n\n\n\n\nAdd: Support for expressions in text element properties: visible, text_color, background_color\n\n\nAdd: Support for automatic horizontal resize with container in HTML\n\n\nFix: Correct aspect ratio when exporting to PDF\n\n\n\n\n1.2.8 (Mar 18 2015)\n\n\n\n\nAdd: CSV data source support\n\n\nAdd: Pivot (cross-tab) support\n\n\nAdd: Support for reports with multiple levels drawing data from different data sources\n\n\nAdd: Error messaging in HTML mode when data not valid for barcode format\n\n\nFix: Designer incorrectly required data source's id property and name property to match\n\n\nFix: PDF error when data not valid for barcode encoding\n\n\nFix: PDF page footer not appearing on last page\n\n\nFix: Incorrect date filtering\n\n\n\n\n1.2.6 (Feb 16 2015)\n\n\n\n\nAdd barcode \n QR code elements\n\n\nAdd: scale text to fit bounding box by specifying fit_text: true in element definition\n\n\nAdd: embed images in report definition by setting designer option embedImages: true\n\n\nFix issue with designer toolbar remaining visible after deleting element\n\n\n\n\n1.2.5 (Feb 6 2015)\n\n\n\n\nFix issue with report viewer toolbar not appearing when no inputs defined\n\n\n\n\n1.2.4 (Feb 5 2015)\n\n\n\n\nEnable toolbar docking\n\n\nAdd page header and footer sections (print mode only), PAGE_NUMBER and PAGE_COUNT built-in variables\n\n\nAdd embedded mode for designer\n\n\n\n\n1.2.3 (Jan 25 2015)\n\n\n\n\nFix re-execution of reports using new datasets with same ID as old\n\n\nSupport rounded box corners in PDF\n\n\nFix issue with first element on pages after first page not appearing in some PDF viewers\n\n\nImprove efficiency of repeated embedded images in PDF\n\n\nAdd designer support for text wrapping", 
            "title": "Change Log"
        }, 
        {
            "location": "/changelog/#ditto-change-log", 
            "text": "", 
            "title": "Ditto Change Log"
        }, 
        {
            "location": "/changelog/#1487-mar-26-2017", 
            "text": "Designer visual updates  Move new element toolbar in designer to left margin  Improvements to preview plugin  Add options to control sections breaking across pages  Warn when trying to save group without group-by field in designer  Add ability to define data sources dependent on other data sources using  requires: ['other-data-source-id']  in data source config.  The  postProcess  handler will receive the listed data sources as arguments in the given order.  Fix issue with  wrap  checkbox on text elements in designer not initializing correctly", 
            "title": "1.4.87 (Mar 26 2017)"
        }, 
        {
            "location": "/changelog/#1480-feb-6-2017", 
            "text": "Expand selection of fonts available by default  Enable repeating group headers on subsequent print pages via  repeatEachPage: true  on section  Add postProcess data source option to transform data source after loading  Improve handling of group sorting when groups are sorted by a non-grouped field  Fix handling of 404 when image source not found while exporting to Excel  Fix issue with pivot element rendering", 
            "title": "1.4.80 (Feb 6 2017)"
        }, 
        {
            "location": "/changelog/#1478-jan-17-2017", 
            "text": "Add designer support for conditional rules on table cells  Add ability to intercept data source selection in designer via \n  onDataSourceSelected and getDataSourceOptions config properties  Fix issue with pivot feature checkbox", 
            "title": "1.4.78 (Jan 17 2017)"
        }, 
        {
            "location": "/changelog/#1477-jan-10-2017", 
            "text": "Fix timing issue with report_rendered event and PDF export  Fix font name resolution issue in PDF export  Add support for conditional rules on table cells", 
            "title": "1.4.77 (Jan 10 2017)"
        }, 
        {
            "location": "/changelog/#1476-jan-8-2017", 
            "text": "Fix issue with ExtJS store loading  Add messaging when data source fails to load within configurable timeout period", 
            "title": "1.4.76 (Jan 8 2017)"
        }, 
        {
            "location": "/changelog/#1475-jan-4-2017", 
            "text": "Add support for zIndex property on elements for PDF rendering  Add support for table cell padding in PDF  Add support for CSS background image in table cells in PDF  Add support for multiple stacked detail sections per data row  Improve support for splitting text elements across pages in PDF  Add support for functions as data sources  Add support for nested JSON data structures via dot syntax, e.g. row.subfield.subfield2  Enable calculated position properties for elements  Improve Markdown bullet list rendering in PDF  Add support for specifying report-level element default properties by element type  Add support for stacked data regions from different data sources in one report  Add autocompletion for dot syntax subfields in conditional rules picker  Add Line element", 
            "title": "1.4.75 (Jan 4 2017)"
        }, 
        {
            "location": "/changelog/#1462-nov-6-2016", 
            "text": "Add conditional property rules support   designer UI  Fix issue with table page breaks in PDF", 
            "title": "1.4.62 (Nov 6 2016)"
        }, 
        {
            "location": "/changelog/#1460-oct-15-2016", 
            "text": "Fix table element data source issue outside of grouped sections  Improve hints about expected config for designer plugins  Add support for multiple detail sections per report", 
            "title": "1.4.60 (Oct 15 2016)"
        }, 
        {
            "location": "/changelog/#1457-sep-20-2016", 
            "text": "Add Table element support in designer", 
            "title": "1.4.57 (Sep 20 2016)"
        }, 
        {
            "location": "/changelog/#1447-aug-17-2016", 
            "text": "Add Checkbox element  Enable custom functions  Enable all element types in page header and footer  Fix issue with corner rounding in PDF mode  Improve server handling of PhantomJS errors on Windows  Improve import of Jasper Reports stylesheets   grouped elements, frame borders  Improve text measurement in PDF  Support mixed content via Markdown", 
            "title": "1.4.47 (Aug 17 2016)"
        }, 
        {
            "location": "/changelog/#1440-jul-22-2016", 
            "text": "Enable creation of custom composite elements, for easy drag and drop of pre-configured elements onto report  Scale fonts to page size in designer to better match final output  Enable hard line break in text element by direct input of \\n (two characters) in text content  Enable non-standard, non-embedded fonts in PDF by calling jsreports.registerFontReference(fontName)  Allow hiding of left pane in designer with config option showSettingsPane: false  Fix chart rendering issue in Firefox  Prevent report template from moving when selecting / de-selecting elements", 
            "title": "1.4.40 (Jul 22 2016)"
        }, 
        {
            "location": "/changelog/#1437-jul-12-2016", 
            "text": "Add: Improved and streamlined NodeJS support  Fix: Display issue with designer with pixel rounding causing panes to be vertically stacked  Add: Control section visibility via expressions", 
            "title": "1.4.37 (Jul 12 2016)"
        }, 
        {
            "location": "/changelog/#1432-jun-6-2016", 
            "text": "Fix: Issue with Unicode font embedding in PDFs in Adobe Reader (Windows)  Add: API to export current view from an existing HTML viewer", 
            "title": "1.4.32 (Jun 6 2016)"
        }, 
        {
            "location": "/changelog/#1419-may-9-2016", 
            "text": "Add: Support for hard line breaks (\\n) in data", 
            "title": "1.4.19 (May 9 2016)"
        }, 
        {
            "location": "/changelog/#1416-may-5-2016", 
            "text": "Fix: Issue with subreport inside subreport not saving properly  Fix: Issue with advanced property editor not saving properly for subreports", 
            "title": "1.4.16 (May 5 2016)"
        }, 
        {
            "location": "/changelog/#1415-may-5-2016", 
            "text": "Add: Sencha ExtJS integration  Add: Internationalization support  Add: Unicode support for PDF  Fix: Issue with missing values in input optionSource", 
            "title": "1.4.15 (May 5 2016)"
        }, 
        {
            "location": "/changelog/#1414-may-4-2016", 
            "text": "Add: Drop-down options for filter inputs (see optionSource at  http://www.jsreports.com/docs/reportdef/#input )  Add: Proportional resize when holding Shift in designer  Fix: Null values displayed as \"null\"", 
            "title": "1.4.14 (May 4 2016)"
        }, 
        {
            "location": "/changelog/#1413-may-3-2016", 
            "text": "Fix: Issue opening designer when joined data source specified without data available for underlying data source  Fix: Issue when using joined data sources together with their origin data sources with subreports", 
            "title": "1.4.13 (May 3 2016)"
        }, 
        {
            "location": "/changelog/#1411-apr-29-2016", 
            "text": "Fix: Issues with chart series when converting to Jasper JRXML  Fix: Issues with adding new elements and converting to JRXML", 
            "title": "1.4.11 (Apr 29 2016)"
        }, 
        {
            "location": "/changelog/#1410-apr-21-2016", 
            "text": "Fix: Issue with default report template being modified when opening designer with no report definition  Fix: Issue with consistency of mixed aggregate calculation syntax, e.g. [=SUM(Hours) * 5]  Fix: Issue with handling of new elements in blank report when converting to Jasper JRXML", 
            "title": "1.4.10 (Apr 21 2016)"
        }, 
        {
            "location": "/changelog/#149-apr-20-2016", 
            "text": "Fix: Prevent overlapping subreports by stacking vertically where needed  Fix: Issues with subreport rendering across pages in PDF  Fix: Box border missing  Fix: Handling of box stacking order in PDF", 
            "title": "1.4.9 (Apr 20 2016)"
        }, 
        {
            "location": "/changelog/#147-apr-15-2016", 
            "text": "Add: Support for new Jasper report creation  Change: Improve PDF page breaking between table rows  Fix: Issue with pivot bucket type not saving properly  Fix: Issue with \"is not\" filter not working in some situations", 
            "title": "1.4.7 (Apr 15 2016)"
        }, 
        {
            "location": "/changelog/#145-mar-24-2016", 
            "text": "Add: Custom date filter display formats  Fix: Issue with date-type filter input value parsing", 
            "title": "1.4.5 (Mar 24 2016)"
        }, 
        {
            "location": "/changelog/#144-mar-21-2016", 
            "text": "Fix: CSS issue interfering with overriding base font for .jsr-report", 
            "title": "1.4.4 (Mar 21 2016)"
        }, 
        {
            "location": "/changelog/#143-mar-18-2016", 
            "text": "Fix: Issue with joins not processing correctly when all data sources are local data", 
            "title": "1.4.3 (Mar 18 2016)"
        }, 
        {
            "location": "/changelog/#142-mar-14-2016", 
            "text": "Add: Report mask   spinner while report rendering (HTML mode)  Change: Changes to report designer default theme (colors, section labels)  Fix: jsreports.export() support for outputHandler with format: 'xlsx'", 
            "title": "1.4.2 (Mar 14 2016)"
        }, 
        {
            "location": "/changelog/#140-feb-1-2016", 
            "text": "Add: Table element  Add: FORMAT function  Add: Support for Excel-style format patterns  Add: Calculations involving aggregates, e.g. \"percent of total\" in detail row ([=amount / SUM('amount')])  Change: Scale fonts in HTML rendering to correspond to page dimensions  Fix: Multi-line text alignment in PDF  Fix: Page footer rendering in PDF", 
            "title": "1.4.0 (Feb 1 2016)"
        }, 
        {
            "location": "/changelog/#1310-dec-31-2015", 
            "text": "Fix: Text element autocomplete dropdown in designer overlapped by report preview  Fix: Isolate default report CSS from external page CSS  Fix: Designer issue with text element autocomplete not opening when clearing initial value  Fix: By default preserve image aspect ratio in HTML, PDF output instead of stretching  Add: Make text element autocomplete dropdown appear on mouse click in field for easier data field insertion", 
            "title": "1.3.10 (Dec 31 2015)"
        }, 
        {
            "location": "/changelog/#139-dec-28-2015", 
            "text": "Add: Support for reserved area for generated pivot columns, enabling better control over final layout  Add: Default print area for Excel export  Fix: Pivot behavior in PDF   Excel", 
            "title": "1.3.9 (Dec 28 2015)"
        }, 
        {
            "location": "/changelog/#135-dec-8-2015", 
            "text": "Add: Ability to import and export Jasper Reports report definitions (.jrxml)", 
            "title": "1.3.5 (Dec 8 2015)"
        }, 
        {
            "location": "/changelog/#130-oct-9-2015", 
            "text": "Add: Page break element  Add: Subreport element", 
            "title": "1.3.0 (Oct 9 2015)"
        }, 
        {
            "location": "/changelog/#1241-sep-29-2015", 
            "text": "Add: Designer support for showing/hiding report header   footer  Fix: Issue with datasets being loaded unnecessarily when rendering report  Fix: Improve reporting of problems during loading of data and schema  Fix: Issue with element widths and heights changing after drag operation in designer", 
            "title": "1.2.41 (Sep 29 2015)"
        }, 
        {
            "location": "/changelog/#1237-sep-8-2015", 
            "text": "Add: Designer left pane overlay mode for constrained screen space  Add: Download button for designer (showDownloadButton: true)  Add: ReportList plugin for designer  Fix: Issue with repeated exports to PDF resulting in extra blank page at beginning  Fix: Issue with direct export to XLSX with images  Fix: Issue with IE not supporting \"newwindow\" and \"print\" export targets (fall back to download)", 
            "title": "1.2.37 (Sep 8 2015)"
        }, 
        {
            "location": "/changelog/#1228-aug-12-2015", 
            "text": "Add: Methods to add buttons and other elements to designer toolbar  Fix: Issue with section heights in default report when no report definition supplied for designer  Fix: Prevent dragging of section boundaries past each other in designer", 
            "title": "1.2.28 (Aug 12 2015)"
        }, 
        {
            "location": "/changelog/#1226-aug-11-2015", 
            "text": "Add: Image URL expression evaluation, enabling images from data source  Add: Designer left pane overlay mode for narrow screen widths  Add: Ability to hide designer header bar  Add: End-user designer documentation ( http://www.jsreports.com/docs/designer )", 
            "title": "1.2.26 (Aug 11 2015)"
        }, 
        {
            "location": "/changelog/#1225-july-29-2015", 
            "text": "Add: ReportBuilder API for programmatic construction of reports  Add: Snap to grid in designer  Add: Select and drag multiple elements in designer with Cmd+click (or Ctrl+click)  Add: Delete multiple elements in designer with Delete key  Add: Copy/paste multiple elements in designer with Cmd+C, Cmd+V (or Ctrl+C, Ctrl+V)  Add: toolbarRendered event", 
            "title": "1.2.25 (July 29 2015)"
        }, 
        {
            "location": "/changelog/#1222-may-23-2015", 
            "text": "Fix: Some text element properties not appearing in advanced property editor", 
            "title": "1.2.22 (May 23 2015)"
        }, 
        {
            "location": "/changelog/#1221-may-19-2015", 
            "text": "Fix: Incorrect section heights in designer in certain scenarios", 
            "title": "1.2.21 (May 19 2015)"
        }, 
        {
            "location": "/changelog/#1219-may-7-2015", 
            "text": "Fix: Barcodes not rendered to PDF properly in iOS Phonegap/Cordova", 
            "title": "1.2.19 (May 7 2015)"
        }, 
        {
            "location": "/changelog/#1216-apr-27-2015", 
            "text": "Add: Support for joined data sources (left, inner)  Add: Property editor for directly editing all element properties", 
            "title": "1.2.16 (Apr 27 2015)"
        }, 
        {
            "location": "/changelog/#1215-apr-22-2015", 
            "text": "Fix: Improve compression of barcodes when rendering to data URI (e.g. \"newwindow\")", 
            "title": "1.2.15 (Apr 22 2015)"
        }, 
        {
            "location": "/changelog/#1210-apr-1-2015", 
            "text": "Add: Support for expressions in text element properties: visible, text_color, background_color  Add: Support for automatic horizontal resize with container in HTML  Fix: Correct aspect ratio when exporting to PDF", 
            "title": "1.2.10 (Apr 1 2015)"
        }, 
        {
            "location": "/changelog/#128-mar-18-2015", 
            "text": "Add: CSV data source support  Add: Pivot (cross-tab) support  Add: Support for reports with multiple levels drawing data from different data sources  Add: Error messaging in HTML mode when data not valid for barcode format  Fix: Designer incorrectly required data source's id property and name property to match  Fix: PDF error when data not valid for barcode encoding  Fix: PDF page footer not appearing on last page  Fix: Incorrect date filtering", 
            "title": "1.2.8 (Mar 18 2015)"
        }, 
        {
            "location": "/changelog/#126-feb-16-2015", 
            "text": "Add barcode   QR code elements  Add: scale text to fit bounding box by specifying fit_text: true in element definition  Add: embed images in report definition by setting designer option embedImages: true  Fix issue with designer toolbar remaining visible after deleting element", 
            "title": "1.2.6 (Feb 16 2015)"
        }, 
        {
            "location": "/changelog/#125-feb-6-2015", 
            "text": "Fix issue with report viewer toolbar not appearing when no inputs defined", 
            "title": "1.2.5 (Feb 6 2015)"
        }, 
        {
            "location": "/changelog/#124-feb-5-2015", 
            "text": "Enable toolbar docking  Add page header and footer sections (print mode only), PAGE_NUMBER and PAGE_COUNT built-in variables  Add embedded mode for designer", 
            "title": "1.2.4 (Feb 5 2015)"
        }, 
        {
            "location": "/changelog/#123-jan-25-2015", 
            "text": "Fix re-execution of reports using new datasets with same ID as old  Support rounded box corners in PDF  Fix issue with first element on pages after first page not appearing in some PDF viewers  Improve efficiency of repeated embedded images in PDF  Add designer support for text wrapping", 
            "title": "1.2.3 (Jan 25 2015)"
        }, 
        {
            "location": "/nodejs/", 
            "text": "Generating PDF reports on the server using Node.js and jsreports\n\n\nThis tutorial shows how to run jsreports within Node.js to generate PDF \ndocuments on the server.  This can be very useful, for example, when you want to\ngenerate and send reports via email on a schedule.\n\n\nThe process is almost identical to generating the PDF client-side.  You\njust need to import the jsreports Server module for Node.js and then call\n\njsreports.export\n with your report template and data sources.\n\n\nRequirements\n\n\nFirst, install a pre-packaged version of \nPhantomJS\n for your platform by running the following command at a command line:\n\n\nnpm install -g phantomjs-prebuilt\n\n\n(Note: if you have trouble with SSL during the installation due to a network firewall,\nread \nHow to temporarily skip SSL validation with npm\n.\nYou can revert this setting after the installation.)\n\n\nSetting up the script\n\n\nCreate a file named \nrun-report.js\n with the following code:\n\n\nvar fs = require('fs');\nvar path = require('path');\n\n/** Import the jsreports server module and create a Server instance */\nvar jsreports = require('./lib/jsreports/jsreports-server.js');\nvar server = new jsreports.Server();\n\n/**\n * Load the report and data source definitions from\n * JSON files specified in command line arguments.\n */\nvar report = require(process.argv[2]);\nvar datasets = require(process.argv[3]);\n\n/**\n * Call server.export() just like you would call jsreports.export().\n * The last argument is a callback function that will be called with\n * a stream containing the PDF for reading.\n */\nserver.export({\n   format: 'PDF',\n   report_def: report,\n   datasets: datasets,\n   /**\n    * Must provide a file:// base URL to prepend to the image \n    * URLs in the report, in order to locate them on the server - \n    * here, expect images to be in the current directory\n    */\n   imageUrlPrefix: 'file://' + path.resolve(__dirname) + '/'\n}, function(err, pdfStream) {\n  if (err) return console.error(err);\n  /**\n   * At this point we have the PDF available for reading\n   * in pdfStream.  Write it to the path specified at \n   * the command line\n   */\n  var outPath = path.resolve(process.argv[4]);\n  var outStream = fs.createWriteStream(outPath, 'utf8');\n  pdfStream.on('end', function() {\n    console.log('Wrote PDF to', outPath);\n    server.stop();\n  });\n  pdfStream.pipe(outStream);\n});\n\n\n\n\nRunning the report from the command line\n\n\nOn the server, at a command line run the following:\n\n\nnode run-report.js", 
            "title": "Generating PDF reports on the server using Node.js and jsreports"
        }, 
        {
            "location": "/nodejs/#generating-pdf-reports-on-the-server-using-nodejs-and-jsreports", 
            "text": "This tutorial shows how to run jsreports within Node.js to generate PDF \ndocuments on the server.  This can be very useful, for example, when you want to\ngenerate and send reports via email on a schedule.  The process is almost identical to generating the PDF client-side.  You\njust need to import the jsreports Server module for Node.js and then call jsreports.export  with your report template and data sources.", 
            "title": "Generating PDF reports on the server using Node.js and jsreports"
        }, 
        {
            "location": "/nodejs/#requirements", 
            "text": "First, install a pre-packaged version of  PhantomJS  for your platform by running the following command at a command line:  npm install -g phantomjs-prebuilt  (Note: if you have trouble with SSL during the installation due to a network firewall,\nread  How to temporarily skip SSL validation with npm .\nYou can revert this setting after the installation.)", 
            "title": "Requirements"
        }, 
        {
            "location": "/nodejs/#setting-up-the-script", 
            "text": "Create a file named  run-report.js  with the following code:  var fs = require('fs');\nvar path = require('path');\n\n/** Import the jsreports server module and create a Server instance */\nvar jsreports = require('./lib/jsreports/jsreports-server.js');\nvar server = new jsreports.Server();\n\n/**\n * Load the report and data source definitions from\n * JSON files specified in command line arguments.\n */\nvar report = require(process.argv[2]);\nvar datasets = require(process.argv[3]);\n\n/**\n * Call server.export() just like you would call jsreports.export().\n * The last argument is a callback function that will be called with\n * a stream containing the PDF for reading.\n */\nserver.export({\n   format: 'PDF',\n   report_def: report,\n   datasets: datasets,\n   /**\n    * Must provide a file:// base URL to prepend to the image \n    * URLs in the report, in order to locate them on the server - \n    * here, expect images to be in the current directory\n    */\n   imageUrlPrefix: 'file://' + path.resolve(__dirname) + '/'\n}, function(err, pdfStream) {\n  if (err) return console.error(err);\n  /**\n   * At this point we have the PDF available for reading\n   * in pdfStream.  Write it to the path specified at \n   * the command line\n   */\n  var outPath = path.resolve(process.argv[4]);\n  var outStream = fs.createWriteStream(outPath, 'utf8');\n  pdfStream.on('end', function() {\n    console.log('Wrote PDF to', outPath);\n    server.stop();\n  });\n  pdfStream.pipe(outStream);\n});", 
            "title": "Setting up the script"
        }, 
        {
            "location": "/nodejs/#running-the-report-from-the-command-line", 
            "text": "On the server, at a command line run the following:  node run-report.js", 
            "title": "Running the report from the command line"
        }, 
        {
            "location": "/designer/", 
            "text": "Ditto \nreport designer documentation\n\n\nThis document describes the features of the Ditto report designer and explains how to use the designer to\ncreate custom reports.\n\n\n Major areas of the designer\n\n\nThis diagram shows the major components of the report designer:\n\n\n\n\n\n\n\n\nHeader bar\n\nContains control buttons such as Save and Cancel.  Not all buttons are always present, and in fact the\nheader bar itself may not be present, depending on how the developer has configured the designer.\n\n\n\n\n\n\nReport setup panel\n\nContains all parameters that define the report structure, for example, which data source to use, grouping,\nand sorting of records within the report.\n\n\n\n\n\n\nReport canvas\n\nThe visual designer area where you arrange elements that make up the report.\n\n\n\n\n\n\nElement toolbar\n\nContains properties of the currently selected element, allowing you to customize each element.  Only visible\nwhen a single element is selected.\n\n\n\n\n\n\nReport setup\n\n\nSelecting a data source\n\n\nIn this selector, choose which data source provides\nthe records needed by your report.  If you need to drill-down into another, linked data source (for example,\nyou want to list branch offices and then for each branch office, obtain the employees for that office from\na different data source), start with the outermost data source (in this example, the branch office list).\nYou'll be able to define the drill-down data source separately in the Grouping section.\nData sources are defined by the application developer.\n\n\nFiltering the data source\n\n\nYou can restrict your report to use only some of the records from the chosen data source.  In the filters\nsection just below the Data Source selector, add one or more filters.\n\n\nTo edit an existing filter, hover over the filter and look for the \"edit\" and \"delete\" icons on the right.\n\n\nFor each filter, specify first the field in the data source containing the values that will be filtered,\nthen the type of comparison that will be done, and finally the value to filter against.\n\n\nTo filter against a report input (see the section on defining inputs), use square brackets containing a\nquestion mark followed by the input name that you defined, for example: \n[?MyFilterName]\n\n\n\n\nLevels and Groups\n\n\nThis area allows you to create sub-groupings of records.  You can define nested groupings if needed, \nstarting with\nthe outermost grouping and working inward.  Changing groupings will affect the structure of the report\nshown in the canvas.\n\n\nAdding a grouping\n\n\nClick the \"add grouping\" button to add a grouping.\n\n\nThe first, top-level grouping that you add will always use records from the report's base data source (chosen\nby the Data Source selector).  You'll need to choose which field in the data source contains the values that\nwill be grouped.\n\n\nYou can choose the order in which the resulting groups will be arranged.  By default, this will match the\ngrouping field.  For example, if you selected to group by the State field for branch offices, by default the\ngroups will be ordered alphabetically by the value in the State field.  You can change this ordering by\nselecting a different field in the \"arranged by\" selector for the grouping.\n\n\nNote that if you select a different ordering, you should choose a field that has the same value for\neach of the grouping\nvalues, because if there are multiple values in the \"arrange by\" field for each value in the grouping field,\nit is not clear which should be used to order that grouping.\n\n\nFinally, you can choose whether this grouping level should have a header and footer.  Use the checkboxes to\nturn on and off the header and footer.  You'll see the report structure change in the canvas.\n\n\nDrilling down across data sources\n\n\nIf you want to nest records from a different data source within records from the report's base data source,\nyou'll need to add at least one grouping for the base data source first, then add a second grouping beneath\nthat.  In the second grouping, you'll have the option to choose a different data source.\n\n\nWhen you change the data source to something other than \"Use rows from parent group,\" you'll need to specify\nhow to select records from the second data source.  Choose the fields from the child and parent data source\nthat contains values that must match in order to pull in records for that parent row.\n\n\nFor example, if you have a base data source listing branch offices, you might do as follows:\n\n\n\n\n\n\nCreate a top grouping level that groups by \"OfficeID\" -- this will give you one group per branch office, since the OfficeID is unique for each office\n\n\n\n\n\n\nCreate a sub-grouping that uses a different data source, \"Employees\".\n\n\n\n\n\n\nSet the sub-grouping's filter fields as follows:\n\n\n\n\n\n\nUse data: [Employees] where [EmployeeOfficeID] equals parent's [OfficeID]\n\n\nThis says that for each office (top-level grouping), you want to pull in records from Employees where the employee's\nEmployeeOfficeID (this field must exist in the Employees data source) matches the OfficeID in the outer\ndata source.\n\n\nDetail section\n\n\nBy default, the detail section lists each record from the data source.  If you have not set up a grouping that pulls\ndata from a second data source, then the detail records come from the report's base data source (chosen in the \nData Source selector).  If you did create a sub-grouping with a second data source, detail records will come from\nthat data source.\n\n\nYou can hide the detail section by un-checking \"Show detail section.\"\n\n\nYou can also specify the ordering of detail rows.\n\n\nThe Inputs tab\n\n\nThis tab allows you to define inputs (parameters) for the report.  For example, you might want to define a\nreport that summarizes sales for a time period, but you'd like to specify the time period when you run the report,\nwithout having to redesign the report.\n\n\nTo implement that example, you would add two inputs under the Inputs tab, named StartDate and EndDate, set to type \"Date.\"\n\n\n\n\nThen, back in the Data \n Groups tab, create two filters that limit the report to rows within the range specified by the two inputs you created:\n\n\n\n\nThe Page tab\n\n\nThe Page tab allows you to define the layout of the report on the printed page.\n\n\nYou can choose either inches or millimeters (mm) as the base units for your report.  The page dimensions and\nmargins will be specified in terms of the units you choose.\n\n\nBy default, the page will be US Letter size (8.5 x 11 inches).\n\n\nTo change the paper size, choose a new option from the drop-down.\n\n\nPage header and footer\n\n\nThe report can have a page header and footer that appear only in print mode (PDF), on each page.\n\n\nUse the \"page header and footer\" checkboxes to turn on or off the page header and footer.\n\n\nWithin the page header and footer on the report canvas, you can use special syntax in text elements to\nprint the page number and page count.  For example, the expression\n\n\nThis is page [PAGE_NUMBER] of [PAGE_COUNT]\n\n\n\nResults in:\n\n\nThis is page 1 of 27\n\n\n\n\n\nElement types\n\n\nText element\n\n\n\n\nThe most common report element.  Displays either static (fixed) text like a report title or dynamic, data-driven\ntext using expressions.\n\n\nInserting data fields\n\n\nUse square brackets around the name of the data field to insert the field value:\n\n\nThe employee's name is [FirstName] [LastName].\n\n\n\nTotals\n\n\nIn a header or footer section, for a group or for the entire report, you can use expressions to compute totals\nover all the values in the group.\n\n\nThere are [SUM(Hours)] total in this time period for \n[COUNT(EmployeeID)] employees, for an average of [AVERAGE(Hours)] hours \nper employee.\n\n\n\nCalculations\n\n\nTo calculate a value from data fields, use square brackets and an equals sign, followed by the expression.  Note that the field names inside the expression do not have square brackets around them individually.\n\n\nThe total amount billed was [=Hours * Billing_rate].\n\n\n\nFormatting numbers and dates\n\n\nYou can apply a format to a numeric or date value.  Click the gear menu icon at the right edge of the element\ntoolbar and look for the Pattern property.  Here are some examples of patterns you can enter:\n\n\n\n\n\n\n\n\nPattern\n\n\nApplies to\n\n\nExample output\n\n\n\n\n\n\n\n\n\n\n$#,##0.00\n\n\nNumber\n\n\n$123,456.78\n\n\n\n\n\n\n#,##0\n\n\nNumber\n\n\n1,234\n\n\n\n\n\n\nM/D/YYYY\n\n\nDate\n\n\n9/1/2015\n\n\n\n\n\n\nMM/DD/YYYY\n\n\nDate\n\n\n09/01/2015\n\n\n\n\n\n\ndddd, MMM D, YYYY h:mm a\n\n\nDate\n\n\nTuesday, Sep 1, 2015 8:56 am\n\n\n\n\n\n\n\n\nChart element\n\n\n\n\nDisplays a chart generated from the values in a grouping.  Supported types are line, bar, and pie charts.\n\n\nThe chart control supports charting a single data series.  The data values come from the value field you specify.\nFor line and bar charts, the label field provides the X-axis labels.  For pie charts, the label field appears in\nthe legend.\n\n\nChart elements must be placed in a header or footer section, because they operate on grouped values.  When a chart\nis placed in a report header or footer, the chart works on all records in the report.\n\n\nPicture element\n\n\n\n\nEmbeds an image in the report.  The set of available images is provided by the application developer.\n\n\nBox element\n\n\n\n\nA rectangle, useful for outlining or highlighting areas of the report.\n\n\nBarcode element\n\n\n\n\nA barcode that can encode values from your data source.  Several types of barcode are available, including QR code, UPC, and Code 39, and others.\n\n\nLike the Text element, the Barcode element allows free-form values to be encoded, including data fields from your data source.  Use the same expression syntax you would use for Text elements.\n\n\nWorking with elements\n\n\nAdding elements to the report\n\n\nTo add an element, click and drag from the element palette above the canvas onto the canvas.\n\n\nRemoving elements from the report\n\n\nTo remove an element, click on it to select it, then either press the \nDelete\n key on your keyboard or click the\nX that appears above the element.  You can delete multiple elements at once by \nselecting multiple elements\n and then\npressing the \nDelete\n key.\n\n\nMoving and resizing elements\n\n\nClick once on an element in the canvas to select it.\n\n\n\n\nSelecting multiple elements\n\n\nTo select multiple elements, hold the \nCtrl\n key (on Windows) or the \nCmd\n key (on Mac) and single-click each\nelement to add it to the selection.  After you've selected all the elements you want, release the \nCtrl\n/\nCmd\n key.\n\n\nWhen you have multiple elements selected, you can drag them all together by dragging any one of the elements as you would normally -- the other elements will move along with it.\n\n\nCopying and pasting elements\n\n\nSelect one or more elements and press \nCtrl+C\n (Windows) or \nCmd+C\n (Mac) to copy the selection.  Then press \nCtrl+V\n (Windows) or \nCmd+V\n (Mac) to paste a copy of the selection.  The pasted elements will be selected and you can drag them to a new location as a group.\n\n\nDragging elements and snapping to the grid\n\n\nNormally, as you drag elements on the canvas, they will snap to a grid to help you line elements up cleanly.  To\noverride that behavior and position elements at a pixel-precise level, hold the \nCtrl\n key (Windows) or \nCmd\n key (Mac) while dragging.\n\n\nPivot (cross-tab) reports\n\n\nYou can generate columns out of rows in your data source using the pivot feature.  For example, you can\ncreate a column for each month based on the values in a date field.  In the designer, you set up a single\ncolumn and choose which field in your data source contains the values that define the columns.  When the\nreport runs, the column is repeated, once for each distinct value in that field in the data source, and\nany elements in that column are evaluated against only those rows matching that column's value.\n\n\nEnabling the pivot feature\n\n\nFirst, check the \"Enable pivot\" checkbox in the Data \n Groups tab in the designer.\n\n\nYou'll see three vertical lines appear in the canvas to the right.  These define the pivot column and how it\nwill be rendered when the report runs.  You can move these lines by clicking and dragging with the mouse.\n\n\nChoosing a pivot field\n\n\nSet the \"Pivot field\" setting to the field in your data source that contains the values that \ndefine the columns.  In our example, we want a column for each month, so we set the pivot field to the\ndate field in our data source.\n\n\nChoose a bucket type (optional)\n\n\nOur data source contains specific dates (each row records a sale on a specific day) but we don't want\na column for each day, only for each month.  So we tell Ditto to group all values for the same month\ninto a single pivot column by selecting the \"month\" bucket type.  Bucket type is only applicable for\ndate-type fields.\n\n\nArranging the pivot column and area\n\n\nThe three vertical lines define two areas in the report.  The left side (not shaded) is the pivot column.\nAny content in this area will be cloned when the report runs, once for each distinct pivot value.  For example,\nif you're pivoting based on a date field and your bucket type is \"month,\" you'll get one column per month\nin the data source.  In the screenshot below, we've set up a column that has a header and a text element in\nthe detail section.\n\n\n\n\nThe right-hand (shaded) area defines room reserved for the generated columns when the report runs.  All\ncolumns will be shown regardless of whether you reserve enough space; the reserved space simply helps you\nvisualize the final output and know where not to place other controls so they won't overlap with the pivot\ncolumns.  Cloned elements will be shown in the reserved area to simulate the additional columns.\n\n\nWhich elements are cloned when the report runs?\n\n\nOnly elements that lie entirely within the pivot column (the left, unshaded side of the pivot region)\nare cloned.\n\n\nWhat about elements that span the pivot area horizontally?\n\n\nIf you place an element so that its left edge is to the left of the pivot column and its right edge is to the\nright of the shaded reserved area, that element's width will be increased so that it spans all of the generated\ncolumns.\n\n\nWhat happens when there are too many columns to fit in the reserved space?\n\n\nWhen there are more values in the data source than fit in the reserved area, Ditto will expand the pivot\narea rightward to fit the extra columns.  When rendering a report to the screen, the area will expand and a\nhorizontal scrollbar will appear if needed.  In print mode (PDF), the page width will be increased to fit\nall content onto a single page.\n\n\nUsing data in the pivot column\n\n\nAll element types can be used as usual in the pivot column.  However, you should treat any element in a\npivot column as if it were in a group header or footer, because the pivot column represents a set of values\ngrouped together (for example, all rows for a given month).  Therefore, you should usually use aggregate\nfunctions instead of referring to a field by itself.  For example, in the pivot cell you should usually use\n\n\n[SUM(\nmy_field_name\n)]\n\n\n\nto total all the values for that month.  \n\n\nThe column header is an exception to this rule.  If you refer to a field name\nwithout an aggregate function in a column header, you'll get a single value from one of the rows matching that column, but which row is unpredictable.  So if your report is pivoted by a date field with bucketing by month, you could write\n\n\n[\nmy_date_field_name\n]\n\n\n\nin a text element in the column header, set its Pattern property to 'MM/YY' to get the month and year for\nthat column.  Since all values in the column have the same month and year, you'll get a predictable result.", 
            "title": "Report Designer Guide"
        }, 
        {
            "location": "/designer/#ditto-report-designer-documentation", 
            "text": "This document describes the features of the Ditto report designer and explains how to use the designer to\ncreate custom reports.", 
            "title": "Ditto report designer documentation"
        }, 
        {
            "location": "/designer/#report-setup", 
            "text": "", 
            "title": "Report setup"
        }, 
        {
            "location": "/designer/#selecting-a-data-source", 
            "text": "In this selector, choose which data source provides\nthe records needed by your report.  If you need to drill-down into another, linked data source (for example,\nyou want to list branch offices and then for each branch office, obtain the employees for that office from\na different data source), start with the outermost data source (in this example, the branch office list).\nYou'll be able to define the drill-down data source separately in the Grouping section.\nData sources are defined by the application developer.", 
            "title": "Selecting a data source"
        }, 
        {
            "location": "/designer/#filtering-the-data-source", 
            "text": "You can restrict your report to use only some of the records from the chosen data source.  In the filters\nsection just below the Data Source selector, add one or more filters.  To edit an existing filter, hover over the filter and look for the \"edit\" and \"delete\" icons on the right.  For each filter, specify first the field in the data source containing the values that will be filtered,\nthen the type of comparison that will be done, and finally the value to filter against.  To filter against a report input (see the section on defining inputs), use square brackets containing a\nquestion mark followed by the input name that you defined, for example:  [?MyFilterName]", 
            "title": "Filtering the data source"
        }, 
        {
            "location": "/designer/#levels-and-groups", 
            "text": "This area allows you to create sub-groupings of records.  You can define nested groupings if needed, \nstarting with\nthe outermost grouping and working inward.  Changing groupings will affect the structure of the report\nshown in the canvas.", 
            "title": "Levels and Groups"
        }, 
        {
            "location": "/designer/#adding-a-grouping", 
            "text": "Click the \"add grouping\" button to add a grouping.  The first, top-level grouping that you add will always use records from the report's base data source (chosen\nby the Data Source selector).  You'll need to choose which field in the data source contains the values that\nwill be grouped.  You can choose the order in which the resulting groups will be arranged.  By default, this will match the\ngrouping field.  For example, if you selected to group by the State field for branch offices, by default the\ngroups will be ordered alphabetically by the value in the State field.  You can change this ordering by\nselecting a different field in the \"arranged by\" selector for the grouping.  Note that if you select a different ordering, you should choose a field that has the same value for\neach of the grouping\nvalues, because if there are multiple values in the \"arrange by\" field for each value in the grouping field,\nit is not clear which should be used to order that grouping.  Finally, you can choose whether this grouping level should have a header and footer.  Use the checkboxes to\nturn on and off the header and footer.  You'll see the report structure change in the canvas.", 
            "title": "Adding a grouping"
        }, 
        {
            "location": "/designer/#drilling-down-across-data-sources", 
            "text": "If you want to nest records from a different data source within records from the report's base data source,\nyou'll need to add at least one grouping for the base data source first, then add a second grouping beneath\nthat.  In the second grouping, you'll have the option to choose a different data source.  When you change the data source to something other than \"Use rows from parent group,\" you'll need to specify\nhow to select records from the second data source.  Choose the fields from the child and parent data source\nthat contains values that must match in order to pull in records for that parent row.  For example, if you have a base data source listing branch offices, you might do as follows:    Create a top grouping level that groups by \"OfficeID\" -- this will give you one group per branch office, since the OfficeID is unique for each office    Create a sub-grouping that uses a different data source, \"Employees\".    Set the sub-grouping's filter fields as follows:    Use data: [Employees] where [EmployeeOfficeID] equals parent's [OfficeID]  This says that for each office (top-level grouping), you want to pull in records from Employees where the employee's\nEmployeeOfficeID (this field must exist in the Employees data source) matches the OfficeID in the outer\ndata source.", 
            "title": "Drilling down across data sources"
        }, 
        {
            "location": "/designer/#detail-section", 
            "text": "By default, the detail section lists each record from the data source.  If you have not set up a grouping that pulls\ndata from a second data source, then the detail records come from the report's base data source (chosen in the \nData Source selector).  If you did create a sub-grouping with a second data source, detail records will come from\nthat data source.  You can hide the detail section by un-checking \"Show detail section.\"  You can also specify the ordering of detail rows.", 
            "title": "Detail section"
        }, 
        {
            "location": "/designer/#the-inputs-tab", 
            "text": "This tab allows you to define inputs (parameters) for the report.  For example, you might want to define a\nreport that summarizes sales for a time period, but you'd like to specify the time period when you run the report,\nwithout having to redesign the report.  To implement that example, you would add two inputs under the Inputs tab, named StartDate and EndDate, set to type \"Date.\"   Then, back in the Data   Groups tab, create two filters that limit the report to rows within the range specified by the two inputs you created:", 
            "title": "The Inputs tab"
        }, 
        {
            "location": "/designer/#the-page-tab", 
            "text": "The Page tab allows you to define the layout of the report on the printed page.  You can choose either inches or millimeters (mm) as the base units for your report.  The page dimensions and\nmargins will be specified in terms of the units you choose.  By default, the page will be US Letter size (8.5 x 11 inches).  To change the paper size, choose a new option from the drop-down.", 
            "title": "The Page tab"
        }, 
        {
            "location": "/designer/#page-header-and-footer", 
            "text": "The report can have a page header and footer that appear only in print mode (PDF), on each page.  Use the \"page header and footer\" checkboxes to turn on or off the page header and footer.  Within the page header and footer on the report canvas, you can use special syntax in text elements to\nprint the page number and page count.  For example, the expression  This is page [PAGE_NUMBER] of [PAGE_COUNT]  Results in:  This is page 1 of 27", 
            "title": "Page header and footer"
        }, 
        {
            "location": "/designer/#element-types", 
            "text": "", 
            "title": "Element types"
        }, 
        {
            "location": "/designer/#text-element", 
            "text": "The most common report element.  Displays either static (fixed) text like a report title or dynamic, data-driven\ntext using expressions.", 
            "title": "Text element"
        }, 
        {
            "location": "/designer/#inserting-data-fields", 
            "text": "Use square brackets around the name of the data field to insert the field value:  The employee's name is [FirstName] [LastName].", 
            "title": "Inserting data fields"
        }, 
        {
            "location": "/designer/#totals", 
            "text": "In a header or footer section, for a group or for the entire report, you can use expressions to compute totals\nover all the values in the group.  There are [SUM(Hours)] total in this time period for \n[COUNT(EmployeeID)] employees, for an average of [AVERAGE(Hours)] hours \nper employee.", 
            "title": "Totals"
        }, 
        {
            "location": "/designer/#calculations", 
            "text": "To calculate a value from data fields, use square brackets and an equals sign, followed by the expression.  Note that the field names inside the expression do not have square brackets around them individually.  The total amount billed was [=Hours * Billing_rate].", 
            "title": "Calculations"
        }, 
        {
            "location": "/designer/#formatting-numbers-and-dates", 
            "text": "You can apply a format to a numeric or date value.  Click the gear menu icon at the right edge of the element\ntoolbar and look for the Pattern property.  Here are some examples of patterns you can enter:     Pattern  Applies to  Example output      $#,##0.00  Number  $123,456.78    #,##0  Number  1,234    M/D/YYYY  Date  9/1/2015    MM/DD/YYYY  Date  09/01/2015    dddd, MMM D, YYYY h:mm a  Date  Tuesday, Sep 1, 2015 8:56 am", 
            "title": "Formatting numbers and dates"
        }, 
        {
            "location": "/designer/#chart-element", 
            "text": "Displays a chart generated from the values in a grouping.  Supported types are line, bar, and pie charts.  The chart control supports charting a single data series.  The data values come from the value field you specify.\nFor line and bar charts, the label field provides the X-axis labels.  For pie charts, the label field appears in\nthe legend.  Chart elements must be placed in a header or footer section, because they operate on grouped values.  When a chart\nis placed in a report header or footer, the chart works on all records in the report.", 
            "title": "Chart element"
        }, 
        {
            "location": "/designer/#picture-element", 
            "text": "Embeds an image in the report.  The set of available images is provided by the application developer.", 
            "title": "Picture element"
        }, 
        {
            "location": "/designer/#box-element", 
            "text": "A rectangle, useful for outlining or highlighting areas of the report.", 
            "title": "Box element"
        }, 
        {
            "location": "/designer/#barcode-element", 
            "text": "A barcode that can encode values from your data source.  Several types of barcode are available, including QR code, UPC, and Code 39, and others.  Like the Text element, the Barcode element allows free-form values to be encoded, including data fields from your data source.  Use the same expression syntax you would use for Text elements.", 
            "title": "Barcode element"
        }, 
        {
            "location": "/designer/#working-with-elements", 
            "text": "", 
            "title": "Working with elements"
        }, 
        {
            "location": "/designer/#adding-elements-to-the-report", 
            "text": "To add an element, click and drag from the element palette above the canvas onto the canvas.", 
            "title": "Adding elements to the report"
        }, 
        {
            "location": "/designer/#removing-elements-from-the-report", 
            "text": "To remove an element, click on it to select it, then either press the  Delete  key on your keyboard or click the\nX that appears above the element.  You can delete multiple elements at once by  selecting multiple elements  and then\npressing the  Delete  key.", 
            "title": "Removing elements from the report"
        }, 
        {
            "location": "/designer/#moving-and-resizing-elements", 
            "text": "Click once on an element in the canvas to select it.", 
            "title": "Moving and resizing elements"
        }, 
        {
            "location": "/designer/#selecting-multiple-elements", 
            "text": "To select multiple elements, hold the  Ctrl  key (on Windows) or the  Cmd  key (on Mac) and single-click each\nelement to add it to the selection.  After you've selected all the elements you want, release the  Ctrl / Cmd  key.  When you have multiple elements selected, you can drag them all together by dragging any one of the elements as you would normally -- the other elements will move along with it.", 
            "title": "Selecting multiple elements"
        }, 
        {
            "location": "/designer/#copying-and-pasting-elements", 
            "text": "Select one or more elements and press  Ctrl+C  (Windows) or  Cmd+C  (Mac) to copy the selection.  Then press  Ctrl+V  (Windows) or  Cmd+V  (Mac) to paste a copy of the selection.  The pasted elements will be selected and you can drag them to a new location as a group.", 
            "title": "Copying and pasting elements"
        }, 
        {
            "location": "/designer/#dragging-elements-and-snapping-to-the-grid", 
            "text": "Normally, as you drag elements on the canvas, they will snap to a grid to help you line elements up cleanly.  To\noverride that behavior and position elements at a pixel-precise level, hold the  Ctrl  key (Windows) or  Cmd  key (Mac) while dragging.", 
            "title": "Dragging elements and snapping to the grid"
        }, 
        {
            "location": "/designer/#pivot-cross-tab-reports", 
            "text": "You can generate columns out of rows in your data source using the pivot feature.  For example, you can\ncreate a column for each month based on the values in a date field.  In the designer, you set up a single\ncolumn and choose which field in your data source contains the values that define the columns.  When the\nreport runs, the column is repeated, once for each distinct value in that field in the data source, and\nany elements in that column are evaluated against only those rows matching that column's value.", 
            "title": "Pivot (cross-tab) reports"
        }, 
        {
            "location": "/designer/#enabling-the-pivot-feature", 
            "text": "First, check the \"Enable pivot\" checkbox in the Data   Groups tab in the designer.  You'll see three vertical lines appear in the canvas to the right.  These define the pivot column and how it\nwill be rendered when the report runs.  You can move these lines by clicking and dragging with the mouse.", 
            "title": "Enabling the pivot feature"
        }, 
        {
            "location": "/designer/#choosing-a-pivot-field", 
            "text": "Set the \"Pivot field\" setting to the field in your data source that contains the values that \ndefine the columns.  In our example, we want a column for each month, so we set the pivot field to the\ndate field in our data source.", 
            "title": "Choosing a pivot field"
        }, 
        {
            "location": "/designer/#choose-a-bucket-type-optional", 
            "text": "Our data source contains specific dates (each row records a sale on a specific day) but we don't want\na column for each day, only for each month.  So we tell Ditto to group all values for the same month\ninto a single pivot column by selecting the \"month\" bucket type.  Bucket type is only applicable for\ndate-type fields.", 
            "title": "Choose a bucket type (optional)"
        }, 
        {
            "location": "/designer/#arranging-the-pivot-column-and-area", 
            "text": "The three vertical lines define two areas in the report.  The left side (not shaded) is the pivot column.\nAny content in this area will be cloned when the report runs, once for each distinct pivot value.  For example,\nif you're pivoting based on a date field and your bucket type is \"month,\" you'll get one column per month\nin the data source.  In the screenshot below, we've set up a column that has a header and a text element in\nthe detail section.   The right-hand (shaded) area defines room reserved for the generated columns when the report runs.  All\ncolumns will be shown regardless of whether you reserve enough space; the reserved space simply helps you\nvisualize the final output and know where not to place other controls so they won't overlap with the pivot\ncolumns.  Cloned elements will be shown in the reserved area to simulate the additional columns.", 
            "title": "Arranging the pivot column and area"
        }, 
        {
            "location": "/designer/#which-elements-are-cloned-when-the-report-runs", 
            "text": "Only elements that lie entirely within the pivot column (the left, unshaded side of the pivot region)\nare cloned.", 
            "title": "Which elements are cloned when the report runs?"
        }, 
        {
            "location": "/designer/#what-about-elements-that-span-the-pivot-area-horizontally", 
            "text": "If you place an element so that its left edge is to the left of the pivot column and its right edge is to the\nright of the shaded reserved area, that element's width will be increased so that it spans all of the generated\ncolumns.", 
            "title": "What about elements that span the pivot area horizontally?"
        }, 
        {
            "location": "/designer/#what-happens-when-there-are-too-many-columns-to-fit-in-the-reserved-space", 
            "text": "When there are more values in the data source than fit in the reserved area, Ditto will expand the pivot\narea rightward to fit the extra columns.  When rendering a report to the screen, the area will expand and a\nhorizontal scrollbar will appear if needed.  In print mode (PDF), the page width will be increased to fit\nall content onto a single page.", 
            "title": "What happens when there are too many columns to fit in the reserved space?"
        }, 
        {
            "location": "/designer/#using-data-in-the-pivot-column", 
            "text": "All element types can be used as usual in the pivot column.  However, you should treat any element in a\npivot column as if it were in a group header or footer, because the pivot column represents a set of values\ngrouped together (for example, all rows for a given month).  Therefore, you should usually use aggregate\nfunctions instead of referring to a field by itself.  For example, in the pivot cell you should usually use  [SUM( my_field_name )]  to total all the values for that month.    The column header is an exception to this rule.  If you refer to a field name\nwithout an aggregate function in a column header, you'll get a single value from one of the rows matching that column, but which row is unpredictable.  So if your report is pivoted by a date field with bucketing by month, you could write  [ my_date_field_name ]  in a text element in the column header, set its Pattern property to 'MM/YY' to get the month and year for\nthat column.  Since all values in the column have the same month and year, you'll get a predictable result.", 
            "title": "Using data in the pivot column"
        }, 
        {
            "location": "/functions/", 
            "text": "Built-in Functions\n\n\nThese built-in functions can be used inside text elements by enclosing\nthem in square brackets beginning with an equals sign, which signals\nthat the expression is a formula.\n\n\nFor example:\n\n\nGrand total: [=SUM(total)]\n\n\n\n\nThe formula above uses the built-in SUM function to add up the values in the \ntotal\n data field.\n\n\n\n\nAggregates\n\n\nSUM\n\n\n=SUM(fieldName)\n\n\n\n\nReturns the sum of the values in the \nfieldName\n field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.\n\n\nCOUNT\n\n\n=COUNT(fieldName)\n\n\n\n\nReturns the count of non-null values, including duplicates, in the \nfieldName\n field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.\n\n\nIf \nfieldName\n is a calculation, returns the number of rows for which the calculation returns \ntrue\n.\n\n\nAVERAGE\n\n\n=AVERAGE(fieldName)\n\n\n\n\nReturns the average of the values in the \nfieldName\n field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.\n\n\nMEDIAN\n\n\n=MEDIAN(fieldName)\n\n\n\n\nReturns the median of the values in the \nfieldName\n field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.\n\n\nMIN\n\n\n=MIN(fieldName)\n\n\n\n\nReturns the minimum of the values in the \nfieldName\n field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.\n\n\nMAX\n\n\n=MAX(fieldName)\n\n\n\n\nReturns the maximum of the values in the \nfieldName\n field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.\n\n\n\n\nOther Functions\n\n\nDATE\n\n\n=DATE()\n=DATE(dateStr)\n=DATE(dateStr, formatStr)\n\n\n\n\nIf no arguments are provided, returns today's date as a JavaScript date.  If a \ndateStr\n argument is provided, parses the string to return the corresponding date.  By default, the date format 'YYYY-MM-DD' is used for parsing.  If the date string is in a different format, the format string may be provided as a second argument.\n\n\nExamples\n\n\n=DATE()\n// Returns today's date as a JavaScript date object\n\n\n\n\n=DATE('2017-02-21')\n// Returns the given date, using the default format YYYY-MM-DD\n\n\n\n\n=DATE('2/21/2017', 'M/D/YYYY')\n// Returns the given date, parsed using the specified custom format\n\n\n\n\n\n\nFORMAT\n\n\n=FORMAT(value, formatStr)\n\n\n\n\nFormats the given number or date into a string, using the specified format string.\n\n\nExamples\n\n\n=FORMAT(DATE(), 'M/D/YY')\n// Returns e.g. \n2/21/17\n\n\n\n\n\n=FORMAT(1234.5678, '$#,##0.00')\n// Returns \n$1,234.57\n\n\n\n\n\n\n\nLOOKUP\n\n\n=LOOKUP(valueToFind, dataSourceId, fieldNameToSearch, fieldNameToReturn)\n\n\n\n\nFind the row containing a specific value in a specific field in a data source, and return the value from another field in the same row.\n\n\nExamples\n\n\nGiven a data source with id \nmain_table\n containing the following data:\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\nprice\n\n\n\n\n\n\n\n\n\n\n2\n\n\nApples\n\n\n12.99\n\n\n\n\n\n\n3\n\n\nOranges\n\n\n15.95\n\n\n\n\n\n\n4\n\n\nBananas\n\n\n87.40\n\n\n\n\n\n\n\n\nThen the following expression:\n\n\n=LOOKUP(3, 'main_table', 'id', 'price')\n\n\n\n\nreturns:\n\n\n15.95\n\n\n\n\nThe formula means: find the row that has value \n3\n in the \nid\n field of the \nmain_table\n data source, and return the value from the \nprice\n field of the same row.", 
            "title": "Built-in Functions"
        }, 
        {
            "location": "/functions/#built-in-functions", 
            "text": "These built-in functions can be used inside text elements by enclosing\nthem in square brackets beginning with an equals sign, which signals\nthat the expression is a formula.  For example:  Grand total: [=SUM(total)]  The formula above uses the built-in SUM function to add up the values in the  total  data field.", 
            "title": "Built-in Functions"
        }, 
        {
            "location": "/functions/#aggregates", 
            "text": "", 
            "title": "Aggregates"
        }, 
        {
            "location": "/functions/#sum", 
            "text": "=SUM(fieldName)  Returns the sum of the values in the  fieldName  field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.", 
            "title": "SUM"
        }, 
        {
            "location": "/functions/#count", 
            "text": "=COUNT(fieldName)  Returns the count of non-null values, including duplicates, in the  fieldName  field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.  If  fieldName  is a calculation, returns the number of rows for which the calculation returns  true .", 
            "title": "COUNT"
        }, 
        {
            "location": "/functions/#average", 
            "text": "=AVERAGE(fieldName)  Returns the average of the values in the  fieldName  field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.", 
            "title": "AVERAGE"
        }, 
        {
            "location": "/functions/#median", 
            "text": "=MEDIAN(fieldName)  Returns the median of the values in the  fieldName  field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.", 
            "title": "MEDIAN"
        }, 
        {
            "location": "/functions/#min", 
            "text": "=MIN(fieldName)  Returns the minimum of the values in the  fieldName  field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.", 
            "title": "MIN"
        }, 
        {
            "location": "/functions/#max", 
            "text": "=MAX(fieldName)  Returns the maximum of the values in the  fieldName  field in all rows inside the current group, if any, or all rows in the current data source if not currently inside a group.", 
            "title": "MAX"
        }, 
        {
            "location": "/functions/#other-functions", 
            "text": "", 
            "title": "Other Functions"
        }, 
        {
            "location": "/functions/#date", 
            "text": "=DATE()\n=DATE(dateStr)\n=DATE(dateStr, formatStr)  If no arguments are provided, returns today's date as a JavaScript date.  If a  dateStr  argument is provided, parses the string to return the corresponding date.  By default, the date format 'YYYY-MM-DD' is used for parsing.  If the date string is in a different format, the format string may be provided as a second argument.", 
            "title": "DATE"
        }, 
        {
            "location": "/functions/#examples", 
            "text": "=DATE()\n// Returns today's date as a JavaScript date object  =DATE('2017-02-21')\n// Returns the given date, using the default format YYYY-MM-DD  =DATE('2/21/2017', 'M/D/YYYY')\n// Returns the given date, parsed using the specified custom format", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/#format", 
            "text": "=FORMAT(value, formatStr)  Formats the given number or date into a string, using the specified format string.", 
            "title": "FORMAT"
        }, 
        {
            "location": "/functions/#examples_1", 
            "text": "=FORMAT(DATE(), 'M/D/YY')\n// Returns e.g.  2/21/17   =FORMAT(1234.5678, '$#,##0.00')\n// Returns  $1,234.57", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/#lookup", 
            "text": "=LOOKUP(valueToFind, dataSourceId, fieldNameToSearch, fieldNameToReturn)  Find the row containing a specific value in a specific field in a data source, and return the value from another field in the same row.", 
            "title": "LOOKUP"
        }, 
        {
            "location": "/functions/#examples_2", 
            "text": "Given a data source with id  main_table  containing the following data:     id  name  price      2  Apples  12.99    3  Oranges  15.95    4  Bananas  87.40     Then the following expression:  =LOOKUP(3, 'main_table', 'id', 'price')  returns:  15.95  The formula means: find the row that has value  3  in the  id  field of the  main_table  data source, and return the value from the  price  field of the same row.", 
            "title": "Examples"
        }
    ]
}